ÜØ/dist/index.mjs≈
import { resolveHeadersFromTokens, slugify } from '@mdit-vue/shared';

const headersPlugin = (md, { level = [2, 3], slugify: slugify$1 = slugify, format } = {}) => {
  const render = md.renderer.render.bind(md.renderer);
  md.renderer.render = (tokens, options, env) => {
    env.headers = resolveHeadersFromTokens(tokens, {
      level,
      shouldAllowHtml: false,
      shouldEscapeText: false,
      slugify: slugify$1,
      format
    });
    return render(tokens, options, env);
  };
};

export { headersPlugin };
∞/dist/index.d.ts≈Çimport MarkdownIt from 'markdown-it';
import { MarkdownItHeader } from '@mdit-vue/types';
export { MarkdownItHeader } from '@mdit-vue/types';

/**
 * Options of @mdit-vue/plugin-headers
 */
interface HeadersPluginOptions {
    /**
     * A custom slugification function
     *
     * Should use the same slugify function with markdown-it-anchor
     * to ensure the link is matched
     */
    slugify?: (str: string) => string;
    /**
     * A function for formatting header title
     */
    format?: (str: string) => string;
    /**
     * Heading level that going to be extracted
     *
     * Should be a subset of markdown-it-anchor's `level` option
     * to ensure the slug is existed
     *
     * @default [2,3]
     */
    level?: number[];
}
declare module '@mdit-vue/types' {
    interface MarkdownItEnv {
        /**
         * The headers that extracted by `@mdit-vue/plugin-headers`
         */
        headers?: MarkdownItHeader[];
    }
}

/**
 * Get markdown headers info
 *
 * Extract them into env
 */
declare const headersPlugin: MarkdownIt.PluginWithOptions<HeadersPluginOptions>;

export { HeadersPluginOptions, headersPlugin };
™/README.md≈'# @mdit-vue/plugin-headers

[![npm](https://badgen.net/npm/v/@mdit-vue/plugin-headers)](https://www.npmjs.com/package/@mdit-vue/plugin-headers)
[![license](https://badgen.net/github/license/mdit-vue/mdit-vue)](https://github.com/mdit-vue/mdit-vue/blob/main/LICENSE)

A [markdown-it](https://github.com/markdown-it/markdown-it) plugin to get markdown headers.

- Extracts all headers info into markdown-it `env.headers`.

## Install

```sh
npm i @mdit-vue/plugin-headers
```

## Usage

```ts
import MarkdownIt from 'markdown-it';
import { headersPlugin } from '@mdit-vue/plugin-headers';
import type { MarkdownItEnv } from '@mdit-vue/types';

const md = MarkdownIt({ html: true }).use(headersPlugin, {
  // options
});
const env: MarkdownItEnv = {};

const rendered = md.render(
  `\
# h1
## h2
### h3
`,
  env,
);

console.log(env.headers);
```

## Options

### format

- Type: `(str: string) => string`

- Details:

  A function for formatting header title.

### level

- Type: `number[]`

- Default: `[2, 3]`

- Details:

  Heading level that going to be extracted.

  When using this plugin with [markdown-it-anchor](https://github.com/valeriangalliat/markdown-it-anchor) (recommended), this option should be a subset of markdown-it-anchor's `level` option to ensure the header slugs are existed.

### slugify

- Type: `(str: string) => string`

- Default: `slugify` from `@mdit-vue/shared`

- Details:

  A custom slugification function.

  The default slugify function comes from [@mdit-vue/shared](https://github.com/mdit-vue/mdit-vue/tree/main/packages/shared) package.

  When using this plugin with [markdown-it-anchor](https://github.com/valeriangalliat/markdown-it-anchor) (recommended), this option will be ignored because the `id` of the headings have already been determined by markdown-it-anchor's `slugify` option.
≠/package.json≈µ{
  "name": "@mdit-vue/plugin-headers",
  "version": "0.11.1",
  "description": "A markdown-it plugin to get markdown headers",
  "keywords": [
    "markdown-it",
    "markdown-it-plugin",
    "vue",
    "header",
    "heading"
  ],
  "homepage": "https://github.com/mdit-vue",
  "bugs": {
    "url": "https://github.com/mdit-vue/mdit-vue/issues"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mdit-vue/mdit-vue.git"
  },
  "license": "MIT",
  "author": "meteorlxy <meteor.lxy@foxmail.com>",
  "type": "module",
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "import": "./dist/index.mjs",
      "require": "./dist/index.cjs"
    }
  },
  "main": "./dist/index.cjs",
  "module": "./dist/index.mjs",
  "types": "./dist/index.d.ts",
  "files": [
    "./dist"
  ],
  "scripts": {
    "build": "unbuild",
    "test": "vitest"
  },
  "dependencies": {
    "@mdit-vue/shared": "0.11.0",
    "@mdit-vue/types": "0.11.0",
    "@types/markdown-it": "^12.2.3",
    "markdown-it": "^13.0.1"
  },
  "devDependencies": {
    "markdown-it-anchor": "^8.6.4"
  },
  "publishConfig": {
    "access": "public"
  },
  "gitHead": "98828479d07c7bc52d178a00cdb92c166eff09ee"
}
®/LICENSE≈IThe MIT License (MIT)

Copyright (c) 2022-present, mdit-vue Contributors

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
Ø/dist/index.cjs≈D'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const shared = require('@mdit-vue/shared');

const headersPlugin = (md, { level = [2, 3], slugify = shared.slugify, format } = {}) => {
  const render = md.renderer.render.bind(md.renderer);
  md.renderer.render = (tokens, options, env) => {
    env.headers = shared.resolveHeadersFromTokens(tokens, {
      level,
      shouldAllowHtml: false,
      shouldEscapeText: false,
      slugify,
      format
    });
    return render(tokens, options, env);
  };
};

exports.headersPlugin = headersPlugin;

â¥/dist/index.d.ts.mapƒﬁ{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAsB,MAAM,SAAS,CAAC;AAO3D,wBAAgB,qBAAqB,CACnC,GAAG,EAAE,YAAY,EACjB,aAAa,EAAE,MAAM,GACpB,YAAY,CAQd"}Æ/dist/index.js≈Ω"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dropUnusedDefinitions = void 0;
const graphql_1 = require("graphql");
function dropUnusedDefinitions(ast, operationName) {
    const separated = (0, graphql_1.separateOperations)(ast)[operationName];
    if (!separated) {
        return ast;
    }
    return separated;
}
exports.dropUnusedDefinitions = dropUnusedDefinitions;
//# sourceMappingURL=index.js.mapŸ,/src/__tests__/dropUnusedDefinitions.test.ts≈“import { print, parse } from "graphql";
import { dropUnusedDefinitions } from "..";

describe("dropUnusedDefinitions", () => {
  it("anonymous operation", () => {
    const operation = parse(`#graphql
      {abc}
    `);
    expect(print(dropUnusedDefinitions(operation, ""))).toMatchInlineSnapshot(`
      "{
        abc
      }"
    `);
  });

  it("named operation", () => {
    const operation = parse(`#graphql
      query MyQuery {abc}
    `);
    expect(print(dropUnusedDefinitions(operation, "MyQuery")))
      .toMatchInlineSnapshot(`
      "query MyQuery {
        abc
      }"
    `);
  });

  it("multiple operations", () => {
    const operation = parse(`#graphql
      query Keep { abc }
      query Drop { def }
    `);
    expect(print(dropUnusedDefinitions(operation, "Keep")))
      .toMatchInlineSnapshot(`
      "query Keep {
        abc
      }"
    `);
  });

  it("includes only used fragments", () => {
    const operation = parse(`#graphql
      query Drop { ...DroppedFragment }
      fragment DroppedFragment on Query { abc }
      query Keep { ...KeptFragment }
      fragment KeptFragment on Query { def }
    `);
    expect(print(dropUnusedDefinitions(operation, "Keep")))
      .toMatchInlineSnapshot(`
      "query Keep {
        ...KeptFragment
      }

      fragment KeptFragment on Query {
        def
      }"
    `);
  });

  it("preserves entire document when operation isn't found", () => {
    const operation = parse(`#graphql
      query Keep { ...KeptFragment }
      fragment KeptFragment on Query { abc }
      query AlsoKeep { ...AlsoKeptFragment }
      fragment AlsoKeptFragment on Query { def }
    `);
    expect(print(dropUnusedDefinitions(operation, "Unknown")))
      .toMatchInlineSnapshot(`
      "query Keep {
        ...KeptFragment
      }

      fragment KeptFragment on Query {
        abc
      }

      query AlsoKeep {
        ...AlsoKeptFragment
      }

      fragment AlsoKeptFragment on Query {
        def
      }"
    `);
  });
});
≠/src/index.ts≈import { DocumentNode, separateOperations } from "graphql";

// A GraphQL query may contain multiple named operations, with the operation to
// use specified separately by the client. This transformation drops unused
// operations from the query, as well as any fragment definitions that are not
// referenced.  (In general we recommend that unused definitions are dropped on
// the client before sending to the server to save bandwidth and parsing time.)
export function dropUnusedDefinitions(
  ast: DocumentNode,
  operationName: string,
): DocumentNode {
  const separated = separateOperations(ast)[operationName];
  if (!separated) {
    // If the given operationName isn't found, just make this whole transform a
    // no-op instead of crashing.
    return ast;
  }
  return separated;
}
∞/dist/index.d.tsƒ≤import { DocumentNode } from "graphql";
export declare function dropUnusedDefinitions(ast: DocumentNode, operationName: string): DocumentNode;
//# sourceMappingURL=index.d.ts.map®/LICENSE≈]MIT License

Copyright (c) 2022 Apollo Graph, Inc. (Formerly Meteor Development Group, Inc.)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
≠/package.json≈ï{
  "name": "@apollo/utils.dropunuseddefinitions",
  "version": "1.1.0",
  "description": "Drop unused definitions from a GraphQL document",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/apollographql/apollo-utils.git",
    "directory": "dropUnusedDefinitions/"
  },
  "keywords": [
    "apollo",
    "graphql",
    "typescript",
    "node"
  ],
  "author": "Apollo <packages@apollographql.com>",
  "license": "MIT",
  "engines": {
    "node": ">=12.13.0"
  },
  "publishConfig": {
    "access": "public"
  },
  "peerDependencies": {
    "graphql": "14.x || 15.x || 16.x"
  }
}
º/src/__tests__/tsconfig.jsonƒq{
  "extends": "../../../../tsconfig.test.base",
  "include": ["**/*"],
  "references": [{ "path": "../../" }]
}
≤/dist/index.js.map≈@{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;AAAA,qCAA2D;AAO3D,SAAgB,qBAAqB,CACnC,GAAiB,EACjB,aAAqB;IAErB,MAAM,SAAS,GAAG,IAAA,4BAAkB,EAAC,GAAG,CAAC,CAAC,aAAa,CAAC,CAAC;IACzD,IAAI,CAAC,SAAS,EAAE;QAGd,OAAO,GAAG,CAAC;KACZ;IACD,OAAO,SAAS,CAAC;AACnB,CAAC;AAXD,sDAWC"}
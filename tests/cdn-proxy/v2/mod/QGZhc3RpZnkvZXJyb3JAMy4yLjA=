ä≠/package.json≈Ë{
  "name": "@fastify/error",
  "version": "3.2.0",
  "description": "A small utility, used by Fastify itself, for generating consistent error objects across your codebase and plugins.",
  "main": "index.js",
  "types": "types/index.d.ts",
  "scripts": {
    "lint": "standard",
    "test": "npm run test:unit && npm run test:typescript",
    "test:unit": "tap",
    "test:typescript": "tsd"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fastify/fastify-error.git"
  },
  "keywords": [
    "fastify",
    "error",
    "utility",
    "plugin"
  ],
  "author": "Tomas Della Vedova",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/fastify/fastify-error/issues"
  },
  "homepage": "https://github.com/fastify/fastify-error#readme",
  "devDependencies": {
    "standard": "^17.0.0",
    "tap": "^16.0.0",
    "tsd": "^0.25.0"
  },
  "tsd": {
    "compilerOptions": {
      "esModuleInterop": true
    }
  },
  "publishConfig": {
    "access": "public"
  }
}
≥/test/index.test.js≈˙'use strict'

/* eslint no-prototype-builtins: 0 */

const test = require('tap').test
const createError = require('..')

test('Create error with zero parameter', t => {
  t.plan(6)

  const NewError = createError('CODE', 'Not available')
  const err = new NewError()
  t.ok(err instanceof Error)
  t.equal(err.name, 'FastifyError')
  t.equal(err.message, 'Not available')
  t.equal(err.code, 'CODE')
  t.equal(err.statusCode, 500)
  t.ok(err.stack)
})

test('Create error with 1 parameter', t => {
  t.plan(6)

  const NewError = createError('CODE', 'hey %s')
  const err = new NewError('alice')
  t.ok(err instanceof Error)
  t.equal(err.name, 'FastifyError')
  t.equal(err.message, 'hey alice')
  t.equal(err.code, 'CODE')
  t.equal(err.statusCode, 500)
  t.ok(err.stack)
})

test('Create error with 1 parameter set to undefined', t => {
  t.plan(1)

  const NewError = createError('CODE', 'hey %s')
  const err = new NewError(undefined)
  t.equal(err.message, 'hey undefined')
})

test('Create error with 2 parameters', (t) => {
  t.plan(6)

  const NewError = createError('CODE', 'hey %s, I like your %s')
  const err = new NewError('alice', 'attitude')
  t.ok(err instanceof Error)
  t.equal(err.name, 'FastifyError')
  t.equal(err.message, 'hey alice, I like your attitude')
  t.equal(err.code, 'CODE')
  t.equal(err.statusCode, 500)
  t.ok(err.stack)
})

test('Create error with 2 parameters set to undefined', t => {
  t.plan(1)

  const NewError = createError('CODE', 'hey %s, I like your %s')
  const err = new NewError(undefined, undefined)
  t.equal(err.message, 'hey undefined, I like your undefined')
})

test('Create error with 3 parameters', t => {
  t.plan(6)

  const NewError = createError('CODE', 'hey %s, I like your %s %s')
  const err = new NewError('alice', 'attitude', 'see you')
  t.ok(err instanceof Error)
  t.equal(err.name, 'FastifyError')
  t.equal(err.message, 'hey alice, I like your attitude see you')
  t.equal(err.code, 'CODE')
  t.equal(err.statusCode, 500)
  t.ok(err.stack)
})

test('Create error with 3 parameters set to undefined', t => {
  t.plan(4)

  const NewError = createError('CODE', 'hey %s, I like your %s %s')
  const err = new NewError(undefined, undefined, undefined)
  t.equal(err.message, 'hey undefined, I like your undefined undefined')
  t.equal(err.code, 'CODE')
  t.equal(err.statusCode, 500)
  t.ok(err.stack)
})

test('Create error with 4 parameters set to undefined', t => {
  t.plan(4)

  const NewError = createError('CODE', 'hey %s, I like your %s %s and %s')
  const err = new NewError(undefined, undefined, undefined, undefined)
  t.equal(err.message, 'hey undefined, I like your undefined undefined and undefined')
  t.equal(err.code, 'CODE')
  t.equal(err.statusCode, 500)
  t.ok(err.stack)
})

test('Create error with no statusCode property', t => {
  t.plan(6)

  const NewError = createError('CODE', 'hey %s', 0)
  const err = new NewError('dude')
  t.ok(err instanceof Error)
  t.equal(err.name, 'FastifyError')
  t.equal(err.message, 'hey dude')
  t.equal(err.code, 'CODE')
  t.equal(err.statusCode, undefined)
  t.ok(err.stack)
})

test('Should throw when error code has no fastify code', t => {
  t.plan(1)

  t.throws(() => createError(), new Error('Fastify error code must not be empty'))
})

test('Should throw when error code has no message', t => {
  t.plan(1)

  t.throws(() => createError('code'), new Error('Fastify error message must not be empty'))
})

test('Create error with different base', t => {
  t.plan(7)

  const NewError = createError('CODE', 'hey %s', 500, TypeError)
  const err = new NewError('dude')
  t.ok(err instanceof Error)
  t.ok(err instanceof TypeError)
  t.equal(err.name, 'FastifyError')
  t.equal(err.message, 'hey dude')
  t.equal(err.code, 'CODE')
  t.equal(err.statusCode, 500)
  t.ok(err.stack)
})

test('FastifyError.toString returns code', t => {
  t.plan(1)

  const NewError = createError('CODE', 'foo')
  const err = new NewError()
  t.equal(err.toString(), 'FastifyError [CODE]: foo')
})

test('Create the error without the new keyword', t => {
  t.plan(6)

  const NewError = createError('CODE', 'Not available')
  const err = NewError()
  t.ok(err instanceof Error)
  t.equal(err.name, 'FastifyError')
  t.equal(err.message, 'Not available')
  t.equal(err.code, 'CODE')
  t.equal(err.statusCode, 500)
  t.ok(err.stack)
})
©/index.js≈5'use strict'

const { inherits, format } = require('util')

function createError (code, message, statusCode = 500, Base = Error) {
  if (!code) throw new Error('Fastify error code must not be empty')
  if (!message) throw new Error('Fastify error message must not be empty')

  code = code.toUpperCase()

  function FastifyError (a, b, c) {
    if (!new.target) {
      return new FastifyError(...arguments)
    }
    Error.captureStackTrace(this, FastifyError)
    this.name = 'FastifyError'
    this.code = code

    // more performant than spread (...) operator
    switch (arguments.length) {
      case 3:
        this.message = format(message, a, b, c)
        break
      case 2:
        this.message = format(message, a, b)
        break
      case 1:
        this.message = format(message, a)
        break
      case 0:
        this.message = message
        break
      default:
        this.message = format(message, ...arguments)
    }

    this.statusCode = statusCode || undefined
  }
  FastifyError.prototype[Symbol.toStringTag] = 'Error'

  FastifyError.prototype.toString = function () {
    return `${this.name} [${this.code}]: ${this.message}`
  }

  inherits(FastifyError, Base)

  return FastifyError
}

module.exports = createError
module.exports.default = createError
module.exports.createError = createError
®/LICENSE≈(MIT License

Copyright (c) 2020 Fastify

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
∑/.github/dependabot.yml≈version: 2
updates:
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "monthly"
    open-pull-requests-limit: 10

  - package-ecosystem: "npm"
    directory: "/"
    schedule:
      interval: "weekly"
    open-pull-requests-limit: 10
±/types/index.d.ts≈õdeclare function createError<C extends string, SC extends number>(code: C, message: string, statusCode: SC, Base?: Error): createError.FastifyErrorConstructor<{ code: C; statusCode: SC }>;
declare function createError<C extends string>(code: C, message: string, statusCode?: number, Base?: Error): createError.FastifyErrorConstructor<{ code: C; }>;

type CreateError = typeof createError;

declare namespace createError {
  export interface FastifyError extends Error {
    code: string;
    name: string;
    statusCode?: number;
  }

  export interface FastifyErrorConstructor<E extends { code: string; statusCode?: number } = { code: string; statusCode?: number }> {
    new (a?: any, b?: any, c?: any): FastifyError & E;
    (a?: any, b?: any, c?: any): FastifyError & E;
    readonly prototype: FastifyError & E;
  }

  export const createError: CreateError
  export { createError as default }
}

export = createError
∂/types/index.test-d.ts≈#import createError, { FastifyError, FastifyErrorConstructor } from '..'
import { expectType } from 'tsd'

const CustomError = createError('ERROR_CODE', 'message')
expectType<FastifyErrorConstructor<{ code: 'ERROR_CODE' }>>(CustomError)
const err = new CustomError()
expectType<FastifyError & { code: 'ERROR_CODE' }>(err)
expectType<'ERROR_CODE'>(err.code)
expectType<string>(err.message)
expectType<number>(err.statusCode!)

const CustomTypedError = createError('OTHER_CODE', 'message', 400)
expectType<FastifyErrorConstructor<{ code: 'OTHER_CODE'; statusCode: 400 }>>(CustomTypedError)
const typed = new CustomTypedError()
expectType<FastifyError & { code: 'OTHER_CODE'; statusCode: 400 }>(typed)
expectType<'OTHER_CODE'>(typed.code)
expectType<string>(typed.message)
expectType<400>(typed.statusCode)
ß/.taprcƒfiles:
  - test/**/*.test.jsπ/.github/workflows/ci.yml≈name: CI

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '*.md'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '*.md'

jobs:
  test:
    uses: fastify/workflows/.github/workflows/plugins-ci.yml@v3
    with:
      license-check: true
      lint: true
™/README.md≈'# @fastify/error

![CI](https://github.com/fastify/fastify-error/workflows/CI/badge.svg)
[![NPM version](https://img.shields.io/npm/v/@fastify/error.svg?style=flat)](https://www.npmjs.com/package/@fastify/error)
[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://standardjs.com/)

A small utility, used by Fastify itself, for generating consistent error objects across your codebase and plugins.

### Install
```
npm i @fastify/error
```

### Usage

The module exports a function that you can use for consistent error objects, it takes 4 parameters:

```
createError(code, message [, statusCode [, Base]])
```

- `code` (`string`, required) - The error code, you can access it later with `error.code`. For consistency, we recommend prefixing plugin error codes with `FST_`
- `message` (`string`, required) - The error message. You can also use interpolated strings for formatting the message.
- `statusCode` (`number`, optional) - The status code that Fastify will use if the error is sent via HTTP.
- `Base` (`Error`, optional) - The base error object that will be used. (eg `TypeError`, `RangeError`)

```js
const createError = require('@fastify/error')
const CustomError = createError('ERROR_CODE', 'message')
console.log(new CustomError())
```

How to use an interpolated string:
```js
const createError = require('@fastify/error')
const CustomError = createError('ERROR_CODE', 'Hello %s')
console.log(new CustomError('world')) // error.message => 'Hello world'
```

## License

Licensed under [MIT](./LICENSE).

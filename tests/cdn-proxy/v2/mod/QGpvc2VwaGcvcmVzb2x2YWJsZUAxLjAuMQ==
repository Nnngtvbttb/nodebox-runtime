‡«/index.d.tsÄÓexport declare type Resolvable<T> = Promise<T> & {
    resolve: (t: T) => void;
    reject: (e: any) => void;
};
declare const resolvablePromise: <T = void>() => Resolvable<T>;
export default resolvablePromise;
©/index.jsÅÄ"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const resolvablePromise = () => {
    let resolve;
    let reject;
    const promise = new Promise((_resolve, _reject) => {
        resolve = _resolve;
        reject = _reject;
    });
    promise.resolve = resolve;
    promise.reject = reject;
    return promise;
};
exports.default = resolvablePromise;
module.exports = resolvablePromise;
//# sourceMappingURL=index.js.map­/package.jsonÅâ{
  "name": "@josephg/resolvable",
  "version": "1.0.1",
  "description": "Promise with .resolve() and .reject() methods",
  "main": "index.js",
  "types": "index.d.ts",
  "scripts": {
    "prepare": "npm run build",
    "build": "tsc"
  },
  "files": [
    "index.*"
  ],
  "repository": "git@github.com:josephg/resolvable.git",
  "author": "Joseph Gentle <me@josephg.com>",
  "license": "ISC",
  "devDependencies": {
    "@types/node": "^15.0.1",
    "typescript": "^4.2.4"
  }
}
¨/LICENSEÅ×Copyright 2019 Joseph Gentle

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted, provided that the above
copyright notice and this permission notice appear in all copies.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
©/index.tsÅëexport type Resolvable<T> = Promise<T> & {
  resolve: (t: T) => void,
  reject: (e: any) => void,
}
const resolvablePromise = <T = void>(): Resolvable<T> => {
  let resolve: (val: T) => void
  let reject: (err: any) => void
  const promise = new Promise<T>((_resolve, _reject) => {
    resolve = _resolve
    reject = _reject
  }) as Resolvable<T>
  promise.resolve = resolve!
  promise.reject = reject!
  return promise
}
export default resolvablePromise
module.exports = resolvablePromise
­/index.js.mapÅã{"version":3,"file":"index.js","sourceRoot":"","sources":["index.ts"],"names":[],"mappings":";;AAIA,MAAM,iBAAiB,GAAG,GAA4B,EAAE;IACtD,IAAI,OAAyB,CAAA;IAC7B,IAAI,MAA0B,CAAA;IAC9B,MAAM,OAAO,GAAG,IAAI,OAAO,CAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,EAAE;QACnD,OAAO,GAAG,QAAQ,CAAA;QAClB,MAAM,GAAG,OAAO,CAAA;IAClB,CAAC,CAAkB,CAAA;IACnB,OAAO,CAAC,OAAO,GAAG,OAAQ,CAAA;IAC1B,OAAO,CAAC,MAAM,GAAG,MAAO,CAAA;IACxB,OAAO,OAAO,CAAA;AAChB,CAAC,CAAA;AACD,kBAAe,iBAAiB,CAAA;AAChC,MAAM,CAAC,OAAO,GAAG,iBAAiB,CAAA"}ª/README.mdÅl# Resolvable promise wrapper

This is a tiny promise wrapper which gives you promises which have explicit `promise.resolve()` / `promise.reject()` methods.

Eg:

```javascript
const resolvable = require('resolvable')

const myPromise = resolvable()

;(async () => {
  doThingA()
  await myPromise
  doThingB()
})()

setTimeout(() => myPromise.resolve(), 1000)
```

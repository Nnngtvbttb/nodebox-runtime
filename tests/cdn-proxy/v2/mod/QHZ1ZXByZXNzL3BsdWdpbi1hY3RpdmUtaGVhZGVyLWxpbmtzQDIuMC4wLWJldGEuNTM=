Ž´/lib/node/index.d.tsÄžimport { activeHeaderLinksPlugin } from './activeHeaderLinksPlugin.js';
export * from './activeHeaderLinksPlugin.js';
export default activeHeaderLinksPlugin;
Ù /lib/client/composables/index.jsÄ+export * from './useActiveHeaderLinks.js';
Ù"/lib/client/composables/index.d.tsÄ+export * from './useActiveHeaderLinks.js';
­/package.jsonÅr{
  "name": "@vuepress/plugin-active-header-links",
  "version": "2.0.0-beta.53",
  "description": "VuePress plugin - active header links",
  "keywords": [
    "vuepress-plugin",
    "vuepress",
    "plugin",
    "active",
    "links"
  ],
  "homepage": "https://github.com/vuepress",
  "bugs": {
    "url": "https://github.com/vuepress/vuepress-next/issues"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vuepress/vuepress-next.git"
  },
  "license": "MIT",
  "author": "meteorlxy",
  "type": "module",
  "exports": {
    ".": "./lib/node/index.js",
    "./client": "./lib/client/index.js",
    "./package.json": "./package.json"
  },
  "main": "./lib/node/index.js",
  "types": "./lib/node/index.d.ts",
  "files": [
    "lib"
  ],
  "dependencies": {
    "@vuepress/client": "2.0.0-beta.53",
    "@vuepress/core": "2.0.0-beta.53",
    "@vuepress/utils": "2.0.0-beta.53",
    "ts-debounce": "^4.0.0",
    "vue": "^3.2.41",
    "vue-router": "^4.1.6"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "build": "tsc -b tsconfig.build.json",
    "clean": "rimraf lib *.tsbuildinfo"
  }
}Ù1/lib/client/composables/useActiveHeaderLinks.d.tsÅ+export interface UseActiveHeaderLinksOptions {
    headerLinkSelector: string;
    headerAnchorSelector: string;
    delay: number;
    offset?: number;
}
export declare const useActiveHeaderLinks: ({ headerLinkSelector, headerAnchorSelector, delay, offset, }: UseActiveHeaderLinksOptions) => void;
Ù&/lib/node/activeHeaderLinksPlugin.d.tsÅÜimport type { Plugin } from '@vuepress/core';
/**
 * Options for @vuepress/plugin-active-header-links
 */
export interface ActiveHeaderLinksPluginOptions {
    /**
     * Selector of header link
     *
     * If a header anchor does not have a corresponding header link,
     * this plugin won't change the route hash to that anchor when
     * scrolling to it.
     *
     * @default 'a.sidebar-item'
     */
    headerLinkSelector?: string;
    /**
     * Selector of header anchor
     *
     * @default '.header-anchor'
     */
    headerAnchorSelector?: string;
    /**
     * The delay of the debounced scroll event listener (in millisecond)
     *
     * @default 200
     */
    delay?: number;
    /**
     * Pixel offset when a header anchor to be determined as active
     *
     * @default 5
     */
    offset?: number;
}
export declare const activeHeaderLinksPlugin: ({ headerLinkSelector, headerAnchorSelector, delay, offset, }?: ActiveHeaderLinksPluginOptions) => Plugin;
µ/lib/client/config.jsÅ+import { defineClientConfig } from '@vuepress/client';
import { useActiveHeaderLinks } from './composables/index.js';
const headerLinkSelector = __AHL_HEADER_LINK_SELECTOR__;
const headerAnchorSelector = __AHL_HEADER_ANCHOR_SELECTOR__;
const delay = __AHL_DELAY__;
const offset = __AHL_OFFSET__;
export default defineClientConfig({
    setup() {
        if (__VUEPRESS_SSR__)
            return;
        useActiveHeaderLinks({
            headerLinkSelector,
            headerAnchorSelector,
            delay,
            offset,
        });
    },
});
¨/LICENSEÅCThe MIT License (MIT)

Copyright (c) 2018-present, Yuxi (Evan) You

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
´/lib/client/index.jsÄ(export * from './composables/index.js';
Ù//lib/client/composables/useActiveHeaderLinks.jsÅDimport { debounce } from 'ts-debounce';
import { onBeforeUnmount, onMounted } from 'vue';
import { useRouter } from 'vue-router';
export const useActiveHeaderLinks = ({ headerLinkSelector, headerAnchorSelector, delay, offset = 5, }) => {
    const router = useRouter();
    const setActiveRouteHash = () => {
        // get current scrollTop
        const scrollTop = Math.max(window.scrollY, document.documentElement.scrollTop, document.body.scrollTop);
        // check if we are at page top
        const isAtPageTop = Math.abs(scrollTop - 0) < offset;
        // replace current route hash with empty string when scrolling back to the top
        if (isAtPageTop) {
            updateHash(router, '');
            return;
        }
        // get current scrollBottom
        const scrollBottom = window.innerHeight + scrollTop;
        // get the total scroll length of current page
        const scrollHeight = Math.max(document.documentElement.scrollHeight, document.body.scrollHeight);
        // check if we have reached page bottom
        // notice the `scrollBottom` might not be exactly equal to `scrollHeight`, so we add offset here
        const isAtPageBottom = Math.abs(scrollHeight - scrollBottom) < offset;
        // get all header links
        const headerLinks = Array.from(document.querySelectorAll(headerLinkSelector));
        // get all header anchors
        const headerAnchors = Array.from(document.querySelectorAll(headerAnchorSelector));
        // filter anchors that do not have corresponding links
        const existedHeaderAnchors = headerAnchors.filter((anchor) => headerLinks.some((link) => link.hash === anchor.hash));
        for (let i = 0; i < existedHeaderAnchors.length; i++) {
            const anchor = existedHeaderAnchors[i];
            const nextAnchor = existedHeaderAnchors[i + 1];
            // notice the `scrollTop` might not be exactly equal to `offsetTop` after clicking the anchor
            // so we add offset
            // if has scrolled past this anchor
            const hasPassedCurrentAnchor = scrollTop >= (anchor.parentElement?.offsetTop ?? 0) - offset;
            // if has not scrolled past next anchor
            const hasNotPassedNextAnchor = !nextAnchor ||
                scrollTop < (nextAnchor.parentElement?.offsetTop ?? 0) - offset;
            // if this anchor is the active anchor
            const isActive = hasPassedCurrentAnchor && hasNotPassedNextAnchor;
            // continue to find the active anchor
            if (!isActive)
                continue;
            const routeHash = decodeURIComponent(router.currentRoute.value.hash);
            const anchorHash = decodeURIComponent(anchor.hash);
            // if the active anchor hash is current route hash, do nothing
            if (routeHash === anchorHash)
                return;
            // check if anchor is at the bottom of the page to keep hash consistent
            if (isAtPageBottom) {
                for (let j = i + 1; j < existedHeaderAnchors.length; j++) {
                    // if current route hash is below the active hash, do nothing
                    if (routeHash === decodeURIComponent(existedHeaderAnchors[j].hash)) {
                        return;
                    }
                }
            }
            // replace current route hash with the active anchor hash
            updateHash(router, anchorHash);
            return;
        }
    };
    const onScroll = debounce(setActiveRouteHash, delay);
    onMounted(() => {
        window.addEventListener('scroll', onScroll);
    });
    onBeforeUnmount(() => {
        window.removeEventListener('scroll', onScroll);
    });
};
/**
 * Update current hash and do not trigger `scrollBehavior`
 */
const updateHash = async (router, hash) => {
    // temporarily disable `scrollBehavior`
    // restore it after navigation
    const { scrollBehavior } = router.options;
    router.options.scrollBehavior = undefined;
    await router
        .replace({
        query: router.currentRoute.value.query,
        hash,
        force: true,
    })
        .finally(() => (router.options.scrollBehavior = scrollBehavior));
};
¶/lib/client/index.d.tsÄ(export * from './composables/index.js';
²/lib/node/index.jsÄžimport { activeHeaderLinksPlugin } from './activeHeaderLinksPlugin.js';
export * from './activeHeaderLinksPlugin.js';
export default activeHeaderLinksPlugin;
Ù$/lib/node/activeHeaderLinksPlugin.jsÅKimport { getDirname, path } from '@vuepress/utils';
const __dirname = getDirname(import.meta.url);
export const activeHeaderLinksPlugin = ({ headerLinkSelector = 'a.sidebar-item', headerAnchorSelector = '.header-anchor', delay = 200, offset = 5, } = {}) => ({
    name: '@vuepress/plugin-active-header-links',
    clientConfigFile: path.resolve(__dirname, '../client/config.js'),
    define: {
        __AHL_HEADER_LINK_SELECTOR__: headerLinkSelector,
        __AHL_HEADER_ANCHOR_SELECTOR__: headerAnchorSelector,
        __AHL_DELAY__: delay,
        __AHL_OFFSET__: offset,
    },
});
·/lib/client/config.d.tsÄZdeclare const _default: import("@vuepress/client").ClientConfig;
export default _default;

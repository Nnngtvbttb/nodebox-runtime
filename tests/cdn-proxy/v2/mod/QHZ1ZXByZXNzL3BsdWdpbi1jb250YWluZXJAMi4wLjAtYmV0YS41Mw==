†¨/LICENSEÅCThe MIT License (MIT)

Copyright (c) 2018-present, Yuxi (Evan) You

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
­/package.jsonÅŠ{
  "name": "@vuepress/plugin-container",
  "version": "2.0.0-beta.53",
  "description": "VuePress plugin - markdown container",
  "keywords": [
    "vuepress-plugin",
    "vuepress",
    "plugin",
    "markdown",
    "container"
  ],
  "homepage": "https://github.com/vuepress",
  "bugs": {
    "url": "https://github.com/vuepress/vuepress-next/issues"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vuepress/vuepress-next.git"
  },
  "license": "MIT",
  "author": "meteorlxy",
  "type": "module",
  "exports": {
    ".": "./lib/node/index.js",
    "./package.json": "./package.json"
  },
  "main": "./lib/node/index.js",
  "types": "./lib/node/index.d.ts",
  "files": [
    "lib"
  ],
  "dependencies": {
    "@types/markdown-it": "^12.2.3",
    "@vuepress/core": "2.0.0-beta.53",
    "@vuepress/markdown": "2.0.0-beta.53",
    "@vuepress/shared": "2.0.0-beta.53",
    "@vuepress/utils": "2.0.0-beta.53",
    "markdown-it": "^13.0.1",
    "markdown-it-container": "^3.0.0"
  },
  "publishConfig": {
    "access": "public"
  },
  "scripts": {
    "build": "tsc -b tsconfig.build.json",
    "clean": "rimraf lib *.tsbuildinfo"
  }
}¾/lib/node/containerPlugin.d.tsÅãimport type { Plugin } from '@vuepress/core';
import type { MarkdownEnv } from '@vuepress/markdown';
import type { LocaleConfig } from '@vuepress/shared';
import type Renderer from 'markdown-it/lib/renderer.js';
import type Token from 'markdown-it/lib/token.js';
/**
 * Options for markdown-it-container
 */
export interface MarkdownItContainerOptions {
    /**
     * The marker of the container syntax
     *
     * @default ':'
     * @see https://github.com/markdown-it/markdown-it-container#api
     */
    marker?: string;
    /**
     * Renderer function for opening / closing tokens
     *
     * @see https://github.com/markdown-it/markdown-it-container#api
     */
    render?: MarkdownItContainerRenderFunction;
    /**
     * Function to validate tail after opening marker, should return `true` on success
     */
    validate?: (params: string) => boolean;
}
export declare type MarkdownItContainerRenderFunction = (tokens: Token[], index: number, options: any, env: MarkdownEnv, self: Renderer) => string;
export declare type RenderPlaceFunction = (info: string) => string;
/**
 * Options for @vuepress/plugin-container
 */
export interface ContainerPluginOptions extends MarkdownItContainerOptions {
    /**
     * The type of the container
     *
     * It would be used as the `name` of the container
     *
     * @see https://github.com/markdown-it/markdown-it-container#api
     */
    type: string;
    /**
     * Locales config for container
     */
    locales?: LocaleConfig<{
        /**
         * Default info of the container
         *
         * If this option is not specified, the default info will fallback to the
         * uppercase of the `type` option
         */
        defaultInfo: string;
    }>;
    /**
     * A function to render the starting tag of the container.
     *
     * This option will not take effect if you don't specify the `after` option.
     */
    before?: RenderPlaceFunction;
    /**
     * A function to render the ending tag of the container.
     *
     * This option will not take effect if you don't specify the `before` option.
     */
    after?: RenderPlaceFunction;
}
export declare const containerPlugin: ({ type, after, before, locales, validate, marker, render, }: ContainerPluginOptions) => Plugin;
¼/lib/node/containerPlugin.jsÅ
jimport { ensureLeadingSlash, resolveLocalePath } from '@vuepress/shared';
import { chalk, logger } from '@vuepress/utils';
import container from 'markdown-it-container';
export const containerPlugin = ({ 
// plugin options
type, after, before, locales, 
// raw options for markdown-it-container
validate, marker, render, }) => {
    const plugin = {
        name: '@vuepress/plugin-container',
        multiple: true,
    };
    // `type` option is required
    if (!type) {
        logger.warn(`[${plugin.name}] ${chalk.magenta('type')} option is required`);
        return plugin;
    }
    // if `render` option is not specified
    // use `before` and `after` to generate render function
    if (!render) {
        let renderBefore;
        let renderAfter;
        if (before !== undefined && after !== undefined) {
            // user defined
            renderBefore = before;
            renderAfter = after;
        }
        else {
            // fallback
            renderBefore = (info) => `<div class="custom-container ${type}">${info ? `<p class="custom-container-title">${info}</p>` : ''}\n`;
            renderAfter = () => '</div>\n';
        }
        // token info stack
        const infoStack = [];
        render = (tokens, index, opts, env) => {
            const token = tokens[index];
            if (token.nesting === 1) {
                // `before` tag
                // resolve info (title)
                let info = token.info.trim().slice(type.length).trim();
                if (!info && locales) {
                    // locale
                    const { filePathRelative } = env;
                    const relativePath = ensureLeadingSlash(filePathRelative ?? '');
                    const localePath = resolveLocalePath(locales, relativePath);
                    const localeData = locales[localePath] ?? {};
                    if (localeData.defaultInfo) {
                        info = localeData.defaultInfo;
                    }
                    else {
                        info = type.toUpperCase();
                    }
                }
                // push the info to stack
                infoStack.push(info);
                // render
                return renderBefore(info);
            }
            else {
                // `after` tag
                // pop the info from stack
                const info = infoStack.pop() || '';
                // render
                return renderAfter(info);
            }
        };
    }
    // use markdown-it-container
    plugin.extendsMarkdown = (md) => {
        md.use(container, type, { render, validate, marker });
    };
    return plugin;
};
´/lib/node/index.d.tsÄ~import { containerPlugin } from './containerPlugin.js';
export * from './containerPlugin.js';
export default containerPlugin;
²/lib/node/index.jsÄ~import { containerPlugin } from './containerPlugin.js';
export * from './containerPlugin.js';
export default containerPlugin;

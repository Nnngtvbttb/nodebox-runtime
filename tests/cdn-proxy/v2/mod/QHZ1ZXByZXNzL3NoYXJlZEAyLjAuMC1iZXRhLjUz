ÑÆ/dist/index.js≈≥// src/utils/index.ts
import { isArray, isFunction, isString } from "@vue/shared";

// src/utils/resolveHeadIdentifier.ts
var resolveHeadIdentifier = ([
  tag,
  attrs,
  content
]) => {
  if (tag === "meta" && attrs.name) {
    return `${tag}.${attrs.name}`;
  }
  if (["title", "base"].includes(tag)) {
    return tag;
  }
  if (tag === "template" && attrs.id) {
    return `${tag}.${attrs.id}`;
  }
  return JSON.stringify([tag, attrs, content]);
};

// src/utils/dedupeHead.ts
var dedupeHead = (head) => {
  const identifierSet = /* @__PURE__ */ new Set();
  const result = [];
  head.forEach((item) => {
    const identifier = resolveHeadIdentifier(item);
    if (!identifierSet.has(identifier)) {
      identifierSet.add(identifier);
      result.push(item);
    }
  });
  return result;
};

// src/utils/ensureLeadingSlash.ts
var ensureLeadingSlash = (str) => str.replace(/^\/?/, "/");

// src/utils/ensureEndingSlash.ts
var ensureEndingSlash = (str) => /(\.html|\/)$/.test(str) ? str : str + "/";

// src/utils/formatDateString.ts
var formatDateString = (str, defaultDateString = "") => {
  const dateMatch = str.match(/\b(\d{4})-(\d{1,2})-(\d{1,2})\b/);
  if (dateMatch === null) {
    return defaultDateString;
  }
  const [, yearStr, monthStr, dayStr] = dateMatch;
  return [yearStr, monthStr.padStart(2, "0"), dayStr.padStart(2, "0")].join("-");
};

// src/utils/isLinkFtp.ts
var isLinkFtp = (link) => link.startsWith("ftp://");

// src/utils/isLinkHttp.ts
var isLinkHttp = (link) => /^(https?:)?\/\//.test(link);

// src/utils/isLinkExternal.ts
var markdownLinkRegexp = /.md((\?|#).*)?$/;
var isLinkExternal = (link, base = "/") => {
  if (isLinkHttp(link) || isLinkFtp(link)) {
    return true;
  }
  if (link.startsWith("/") && !link.startsWith(base) && !markdownLinkRegexp.test(link)) {
    return true;
  }
  return false;
};

// src/utils/isLinkMailto.ts
var isLinkMailto = (link) => /^mailto:/.test(link);

// src/utils/isLinkTel.ts
var isLinkTel = (link) => /^tel:/.test(link);

// src/utils/isPlainObject.ts
var isPlainObject = (val) => Object.prototype.toString.call(val) === "[object Object]";

// src/utils/removeEndingSlash.ts
var removeEndingSlash = (str) => str.replace(/\/$/, "");

// src/utils/removeLeadingSlash.ts
var removeLeadingSlash = (str) => str.replace(/^\//, "");

// src/utils/resolveLocalePath.ts
var resolveLocalePath = (locales, routePath) => {
  const localePaths = Object.keys(locales).sort((a, b) => {
    const levelDelta = b.split("/").length - a.split("/").length;
    if (levelDelta !== 0) {
      return levelDelta;
    }
    return b.length - a.length;
  });
  for (const localePath of localePaths) {
    if (routePath.startsWith(localePath)) {
      return localePath;
    }
  }
  return "/";
};

// src/utils/resolveRoutePathFromUrl.ts
var resolveRoutePathFromUrl = (url, base = "/") => url.replace(/^(https?:)?\/\/[^/]*/, "").replace(new RegExp(`^${base}`), "/");
export {
  dedupeHead,
  ensureEndingSlash,
  ensureLeadingSlash,
  formatDateString,
  isArray,
  isFunction,
  isLinkExternal,
  isLinkFtp,
  isLinkHttp,
  isLinkMailto,
  isLinkTel,
  isPlainObject,
  isString,
  removeEndingSlash,
  removeLeadingSlash,
  resolveHeadIdentifier,
  resolveLocalePath,
  resolveRoutePathFromUrl
};
≠/package.json≈á{
  "name": "@vuepress/shared",
  "version": "2.0.0-beta.53",
  "description": "Utils that shared between VuePress node and client",
  "keywords": [
    "vuepress",
    "shared",
    "utils"
  ],
  "homepage": "https://github.com/vuepress",
  "bugs": {
    "url": "https://github.com/vuepress/vuepress-next/issues"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vuepress/vuepress-next.git"
  },
  "license": "MIT",
  "author": "meteorlxy",
  "type": "module",
  "exports": {
    ".": "./dist/index.js",
    "./package.json": "./package.json"
  },
  "main": "./dist/index.js",
  "module": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "files": [
    "dist"
  ],
  "dependencies": {
    "@mdit-vue/types": "^0.11.0",
    "@vue/shared": "^3.2.41"
  },
  "publishConfig": {
    "access": "public"
  },
  "tsup": {
    "clean": true,
    "dts": "./src/index.ts",
    "entry": [
      "./src/index.ts"
    ],
    "format": [
      "esm"
    ],
    "outDir": "./dist",
    "sourcemap": false,
    "target": "es2020",
    "tsconfig": "../tsconfig.dts.json"
  },
  "scripts": {
    "build": "tsup",
    "clean": "rimraf dist"
  }
}∞/dist/index.d.ts≈Cimport { MarkdownItHeader } from '@mdit-vue/types';
export { isArray, isFunction, isString } from '@vue/shared';

/**
 * Config for `<head>` tags
 */
declare type HeadConfig = [HeadTagEmpty, HeadAttrsConfig] | [HeadTagNonEmpty, HeadAttrsConfig, string];
/**
 * Allowed tags in `<head>`
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/head
 */
declare type HeadTag = HeadTagNonEmpty | HeadTagEmpty;
/**
 * Non-empty tags in `<head>`
 */
declare type HeadTagNonEmpty = 'title' | 'style' | 'script' | 'noscript' | 'template';
/**
 * Empty tags in `<head>`
 */
declare type HeadTagEmpty = 'base' | 'link' | 'meta' | 'script';
/**
 * Attributes to be set for tags in `<head>`
 */
declare type HeadAttrsConfig = Record<string, string | boolean>;

/**
 * Locales config, a key-value object
 *
 * - Key is the locale path (prefix)
 * - Value is the locales data
 *
 * @remark suffix `Config` means this is for user config
 */
declare type LocaleConfig<T extends LocaleData = LocaleData> = Record<string, Partial<T>>;
/**
 * Locales data
 */
declare type LocaleData = Record<never, never>;

/**
 * Base type of vuepress page
 */
declare type PageBase<ExtraPageFrontmatter extends Record<any, any> = Record<string, unknown>> = {
    /**
     * Identifier of the page
     *
     * Will also be used as the component name
     *
     * @example 'v-foobar'
     */
    key: string;
    /**
     * Route path of the page
     *
     * Firstly inferred from the file path
     *
     * Might be overridden by permalink
     *
     * @example '/guide/index.html'
     * @example '/2020/02/02/hello-world.html'
     */
    path: string;
    /**
     * Title of the page
     */
    title: string;
    /**
     * Language of the page
     */
    lang: string;
    /**
     * Front matter of the page
     */
    frontmatter: PageFrontmatter<ExtraPageFrontmatter>;
    /**
     * Excerpt of the page
     */
    excerpt: string;
    /**
     * Headers of the page
     */
    headers: PageHeader[];
};
/**
 * Vuepress page data
 */
declare type PageData<ExtraPageData extends Record<any, any> = Record<never, never>, ExtraPageFrontmatter extends Record<any, any> = Record<string, unknown>> = PageBase<ExtraPageFrontmatter> & ExtraPageData;
/**
 * Vuepress page frontmatter
 *
 * Notice that frontmatter is parsed from yaml or other languages,
 * so we cannot guarantee the type safety
 */
declare type PageFrontmatter<T extends Record<any, any> = Record<string, unknown>> = Partial<T> & {
    date?: string | Date;
    description?: string;
    head?: HeadConfig[];
    lang?: string;
    layout?: string;
    permalink?: string;
    permalinkPattern?: string | null;
    routeMeta?: Record<string, unknown>;
    title?: string;
};
/**
 * Vuepress page header
 */
declare type PageHeader = MarkdownItHeader;

/**
 * Vuepress site data
 */
interface SiteData extends SiteLocaleData {
    /**
     * The base URL the site will be deployed at
     *
     * It should always start and end with a slash
     *
     * @default '/'
     */
    base: '/' | `/${string}/`;
    /**
     * Specify locales for i18n support
     *
     * It will override the root-level site data in different subpath
     *
     * @example
     * {
     *   '/en/': {
     *     lang: 'en-US',
     *     title: 'Hello',
     *     description: 'This will take effect under /en/ subpath',
     *   },
     *   '/zh/': {
     *     lang: 'zh-CN',
     *     title: '‰Ω†Â•Ω',
     *     description: 'ÂÆÉÂ∞Ü‰ºöÂú® /zh/ Â≠êË∑ØÂæÑ‰∏ãÁîüÊïà',
     *   }
     * }
     */
    locales: SiteLocaleConfig;
}
/**
 * Locales data of vuepress site
 *
 * If they are set in the root of site data, they will be used
 * as the default value
 *
 * If they are set in the `locales` of site data, they will be
 * used for specific locale
 */
interface SiteLocaleData {
    /**
     * Language for the site
     *
     * @default 'en-US'
     */
    lang: string;
    /**
     * Title for the site
     *
     * @default ''
     */
    title: string;
    /**
     * Description for the site
     *
     * @default ''
     */
    description: string;
    /**
     * Head config
     *
     * Descibe the tags to be appended into the `<head>` tag
     *
     * @default []
     *
     * @example ['link', { rel: 'icon', href: '/logo.png' }]
     * @example ['style', { type: 'text/css' }, 'p { color: red; }']
     */
    head: HeadConfig[];
}
/**
 * Site locale config
 */
declare type SiteLocaleConfig = LocaleConfig<SiteLocaleData>;

/**
 * Context for SSR
 */
interface VuepressSSRContext {
    lang: string;
    head: HeadConfig[];
}

/**
 * Dedupe head config with identifier
 *
 * Items that appear earlier have higher priority
 */
declare const dedupeHead: (head: HeadConfig[]) => HeadConfig[];

/**
 * Ensure a url string to have leading slash /
 */
declare const ensureLeadingSlash: (str: string) => string;

/**
 * Ensure a url string to have ending slash /
 */
declare const ensureEndingSlash: (str: string) => string;

/**
 * Format a date string to `yyyy-MM-dd`
 */
declare const formatDateString: (str: string, defaultDateString?: string) => string;

/**
 * Determine a link is external or not
 */
declare const isLinkExternal: (link: string, base?: string) => boolean;

/**
 * Determine a link is ftp link or not
 */
declare const isLinkFtp: (link: string) => boolean;

/**
 * Determine a link is http link or not
 *
 * - http://github.com
 * - https://github.com
 * - //github.com
 */
declare const isLinkHttp: (link: string) => boolean;

/**
 * Determine a link is a mailto: address or not
 */
declare const isLinkMailto: (link: string) => boolean;

/**
 * Determine a link is a tel: address or not
 */
declare const isLinkTel: (link: string) => boolean;

/**
 * Check if a value is plain object, with generic type support
 */
declare const isPlainObject: <T extends Record<any, any> = Record<any, any>>(val: unknown) => val is T;

/**
 * Remove ending slash / from a string
 */
declare const removeEndingSlash: (str: string) => string;

/**
 * Remove leading slash / from a string
 */
declare const removeLeadingSlash: (str: string) => string;

/**
 * Resolve identifier of a tag, to avoid duplicated tags in `<head>`
 */
declare const resolveHeadIdentifier: ([tag, attrs, content,]: HeadConfig) => string;

/**
 * Resolve the matched locale path of route path
 */
declare const resolveLocalePath: (locales: LocaleConfig, routePath: string) => string;

declare const resolveRoutePathFromUrl: (url: string, base?: string) => string;

export { HeadAttrsConfig, HeadConfig, HeadTag, HeadTagEmpty, HeadTagNonEmpty, LocaleConfig, LocaleData, PageBase, PageData, PageFrontmatter, PageHeader, SiteData, SiteLocaleConfig, SiteLocaleData, VuepressSSRContext, dedupeHead, ensureEndingSlash, ensureLeadingSlash, formatDateString, isLinkExternal, isLinkFtp, isLinkHttp, isLinkMailto, isLinkTel, isPlainObject, removeEndingSlash, removeLeadingSlash, resolveHeadIdentifier, resolveLocalePath, resolveRoutePathFromUrl };
®/LICENSE≈CThe MIT License (MIT)

Copyright (c) 2018-present, Yuxi (Evan) You

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

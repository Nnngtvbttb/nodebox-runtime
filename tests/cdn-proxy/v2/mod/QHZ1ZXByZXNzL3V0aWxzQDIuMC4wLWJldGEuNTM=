ÑÆ/dist/index.js≈•// src/index.ts
import chalk2 from "chalk";
import debug from "debug";
import fs from "fs-extra";
import { globby } from "globby";
import hash from "hash-sum";
import ora2 from "ora";
import path3 from "upath";

// src/getDirname.ts
import { fileURLToPath } from "url";
import path from "upath";
var getDirname = (importMetaUrl) => path.dirname(fileURLToPath(importMetaUrl));

// src/importFile.ts
import { pathToFileURL } from "url";
var importFile = (filePath) => import(pathToFileURL(filePath).toString());
var importFileDefault = (filePath) => importFile(filePath).then((m) => m.default);

// src/formatMs.ts
var formatMs = (ms) => {
  if (ms < 1e3)
    return `${ms}ms`;
  return `${(ms / 1e3).toFixed(2)}s`;
};

// src/isChildPath.ts
import path2 from "upath";
var isChildPath = (child, parent) => {
  const childPath = path2.normalize(child);
  const parentPath = path2.normalize(parent);
  if (!path2.win32.isAbsolute(childPath) || !path2.win32.isAbsolute(parentPath)) {
    return false;
  }
  const relativePath = path2.relative(parentPath, childPath);
  return relativePath === "" || !relativePath.startsWith("..");
};

// src/logger.ts
import chalk from "chalk";
var info = (...args) => {
  console.log(chalk.cyan("info"), ...args);
};
var tip = (...args) => {
  console.log(chalk.blue("tip"), ...args);
};
var success = (...args) => {
  console.log(chalk.green("success"), ...args);
};
var warn = (...args) => {
  console.warn(chalk.yellow("warning"), ...args);
};
var error = (...args) => {
  console.error(chalk.red("error"), ...args);
};
var createError = (message) => {
  error(message);
  return new Error(message);
};
var logger = {
  info,
  tip,
  success,
  warn,
  error,
  createError
};

// src/renderHeadAttrs.ts
var renderHeadAttrs = (attrs) => Object.entries(attrs).filter((item) => item[1] !== false).map(
  ([key, value]) => value === true ? ` ${key}` : ` ${key}="${attrs[key]}"`
).join("");

// src/renderHead.ts
var renderHead = ([
  tag,
  attrs,
  innerHTML = ""
]) => {
  const openTag = `<${tag}${renderHeadAttrs(attrs)}>`;
  if (tag === "link" || tag === "meta" || tag === "base") {
    return openTag;
  }
  return `${openTag}${innerHTML}</${tag}>`;
};

// src/withSpinner.ts
import process from "process";
import ora from "ora";
var withSpinner = (msg) => async (target) => {
  if (process.env.DEBUG) {
    return target();
  }
  const start = Date.now();
  const spinner = ora();
  try {
    spinner.start(msg);
    const result = await target(spinner);
    spinner.succeed(`${msg} - done in ${formatMs(Date.now() - start)}`);
    return result;
  } catch (e) {
    spinner.fail(`${msg} - failed in ${formatMs(Date.now() - start)}`);
    throw e;
  }
};
export {
  chalk2 as chalk,
  createError,
  debug,
  error,
  formatMs,
  fs,
  getDirname,
  globby,
  hash,
  importFile,
  importFileDefault,
  info,
  isChildPath,
  logger,
  ora2 as ora,
  path3 as path,
  renderHead,
  renderHeadAttrs,
  success,
  tip,
  warn,
  withSpinner
};
®/LICENSE≈CThe MIT License (MIT)

Copyright (c) 2018-present, Yuxi (Evan) You

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
∞/dist/index.d.ts≈@export { default as chalk } from 'chalk';
export { default as debug } from 'debug';
export { default as fs } from 'fs-extra';
export { globby } from 'globby';
export { default as hash } from 'hash-sum';
import { Ora } from 'ora';
export { default as ora } from 'ora';
export { default as path } from 'upath';
import { HeadConfig, HeadAttrsConfig } from '@vuepress/shared';

declare const getDirname: (importMetaUrl: string) => string;

/**
 * A helper for dynamically importing a file path
 *
 * We need to use `pathToFileURL` to transform file path wo compat with windows
 */
declare const importFile: <T>(filePath: string) => Promise<T>;
/**
 * A wrapper of `importFile` and returns the default export
 */
declare const importFileDefault: <T>(filePath: string) => Promise<T>;

/**
 * Format millisecond
 */
declare const formatMs: (ms: number) => string;

/**
 * Check if `child` is a sub path of `parent` or not. Return `true` if
 * they are the same path
 */
declare const isChildPath: (child: string, parent: string) => boolean;

declare const info: (...args: any[]) => void;
declare const tip: (...args: any[]) => void;
declare const success: (...args: any[]) => void;
declare const warn: (...args: any[]) => void;
declare const error: (...args: any[]) => void;
declare const createError: (message?: string | undefined) => Error;
declare const logger: {
    info: (...args: any[]) => void;
    tip: (...args: any[]) => void;
    success: (...args: any[]) => void;
    warn: (...args: any[]) => void;
    error: (...args: any[]) => void;
    createError: (message?: string | undefined) => Error;
};

/**
 * Render head config to string
 */
declare const renderHead: ([tag, attrs, innerHTML,]: HeadConfig) => string;

/**
 * Render head attrs config to string
 */
declare const renderHeadAttrs: (attrs: HeadAttrsConfig) => string;

declare const withSpinner: (msg: string) => <T>(target: (spinner?: Ora) => Promise<T>) => Promise<T>;

export { createError, error, formatMs, getDirname, importFile, importFileDefault, info, isChildPath, logger, renderHead, renderHeadAttrs, success, tip, warn, withSpinner };
≠/package.json≈2{
  "name": "@vuepress/utils",
  "version": "2.0.0-beta.53",
  "description": "Utils package of VuePress",
  "keywords": [
    "vuepress",
    "utils"
  ],
  "homepage": "https://github.com/vuepress",
  "bugs": {
    "url": "https://github.com/vuepress/vuepress-next/issues"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/vuepress/vuepress-next.git"
  },
  "license": "MIT",
  "author": "meteorlxy",
  "type": "module",
  "exports": {
    ".": "./dist/index.js",
    "./package.json": "./package.json"
  },
  "main": "./dist/index.js",
  "types": "./dist/index.d.ts",
  "files": [
    "dist"
  ],
  "dependencies": {
    "@types/debug": "^4.1.7",
    "@types/fs-extra": "^9.0.13",
    "@types/hash-sum": "^1.0.0",
    "@vuepress/shared": "2.0.0-beta.53",
    "chalk": "^5.1.2",
    "debug": "^4.3.4",
    "fs-extra": "^10.1.0",
    "globby": "^13.1.2",
    "hash-sum": "^2.0.0",
    "ora": "^6.1.2",
    "upath": "^2.0.1"
  },
  "publishConfig": {
    "access": "public"
  },
  "tsup": {
    "clean": true,
    "dts": "./src/index.ts",
    "entry": [
      "./src/index.ts"
    ],
    "format": [
      "esm"
    ],
    "outDir": "./dist",
    "sourcemap": false,
    "target": "es2020",
    "tsconfig": "../tsconfig.dts.json"
  },
  "scripts": {
    "build": "tsup",
    "clean": "rimraf dist"
  }
}
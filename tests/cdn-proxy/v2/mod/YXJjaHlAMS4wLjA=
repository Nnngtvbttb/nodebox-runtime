Š¬/.travis.ymlÄ+language: node_js
node_js:
  - 0.6
  - 0.8
´/test/non_unicode.jsÅvar test = require('tape');
var archy = require('../');

test('beep', function (t) {
    var s = archy({
      label : 'beep',
      nodes : [
        'ity',
        {
          label : 'boop',
          nodes : [
            {
              label : 'o_O',
              nodes : [
                {
                  label : 'oh',
                  nodes : [ 'hello', 'puny' ]
                },
                'human'
              ]
            },
            'party!'
          ]
        }
      ]
    }, '', { unicode : false });
    t.equal(s, [
        'beep',
        '+-- ity',
        '`-- boop',
        '  +-- o_O',
        '  | +-- oh',
        '  | | +-- hello',
        '  | | `-- puny',
        '  | `-- human',
        '  `-- party!',
        ''
    ].join('\n'));
    t.end();
});
±/examples/beep.jsÅƒvar archy = require('../');
var s = archy({
  label : 'beep',
  nodes : [
    'ity',
    {
      label : 'boop',
      nodes : [
        {
          label : 'o_O',
          nodes : [
            {
              label : 'oh',
              nodes : [ 'hello', 'puny' ]
            },
            'human'
          ]
        },
        'party\ntime!'
      ]
    }
  ]
});
console.log(s);
­/package.jsonÅÒ{
    "name" : "archy",
    "version" : "1.0.0",
    "description" : "render nested hierarchies `npm ls` style with unicode pipes",
    "main" : "index.js",
    "devDependencies" : {
        "tap" : "~0.3.3",
        "tape" : "~0.1.1"
    },
    "scripts" : {
        "test" : "tap test"
    },
    "testling" : {
        "files" : "test/*.js",
        "browsers" : {
            "iexplore" : [ "6.0", "7.0", "8.0", "9.0" ],
            "chrome" : [ "20.0" ],
            "firefox" : [ "10.0", "15.0" ],
            "safari" : [ "5.1" ],
            "opera" : [ "12.0" ]
        }
    },
    "repository" : {
        "type" : "git",
        "url" : "http://github.com/substack/node-archy.git"
    },
    "keywords" : [
        "hierarchy",
        "npm ls",
        "unicode",
        "pretty",
        "print"
    ],
    "author" : {
        "name" : "James Halliday",
        "email" : "mail@substack.net",
        "url" : "http://substack.net"
    },
    "license" : "MIT"
}
¨/LICENSEÅ1This software is released under the MIT license:

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
·/examples/multi_line.jsÅžvar archy = require('../');

var s = archy({
  label : 'beep\none\ntwo',
  nodes : [
    'ity',
    {
      label : 'boop',
      nodes : [
        {
          label : 'o_O\nwheee',
          nodes : [
            {
              label : 'oh',
              nodes : [ 'hello', 'puny\nmeat' ]
            },
            'creature'
          ]
        },
        'party\ntime!'
      ]
    }
  ]
});
console.log(s);
­/test/beep.jsÅBvar test = require('tape');
var archy = require('../');

test('beep', function (t) {
    var s = archy({
      label : 'beep',
      nodes : [
        'ity',
        {
          label : 'boop',
          nodes : [
            {
              label : 'o_O',
              nodes : [
                {
                  label : 'oh',
                  nodes : [ 'hello', 'puny' ]
                },
                'human'
              ]
            },
            'party!'
          ]
        }
      ]
    });
    t.equal(s, [
        'beep',
        'â”œâ”€â”€ ity',
        'â””â”€â”¬ boop',
        '  â”œâ”€â”¬ o_O',
        '  â”‚ â”œâ”€â”¬ oh',
        '  â”‚ â”‚ â”œâ”€â”€ hello',
        '  â”‚ â”‚ â””â”€â”€ puny',
        '  â”‚ â””â”€â”€ human',
        '  â””â”€â”€ party!',
        ''
    ].join('\n'));
    t.end();
});
°/readme.markdownÅá# archy

Render nested hierarchies `npm ls` style with unicode pipes.

[![browser support](http://ci.testling.com/substack/node-archy.png)](http://ci.testling.com/substack/node-archy)

[![build status](https://secure.travis-ci.org/substack/node-archy.png)](http://travis-ci.org/substack/node-archy)

# example

``` js
var archy = require('archy');
var s = archy({
  label : 'beep',
  nodes : [
    'ity',
    {
      label : 'boop',
      nodes : [
        {
          label : 'o_O',
          nodes : [
            {
              label : 'oh',
              nodes : [ 'hello', 'puny' ]
            },
            'human'
          ]
        },
        'party\ntime!'
      ]
    }
  ]
});
console.log(s);
```

output

```
beep
â”œâ”€â”€ ity
â””â”€â”¬ boop
  â”œâ”€â”¬ o_O
  â”‚ â”œâ”€â”¬ oh
  â”‚ â”‚ â”œâ”€â”€ hello
  â”‚ â”‚ â””â”€â”€ puny
  â”‚ â””â”€â”€ human
  â””â”€â”€ party
      time!
```

# methods

var archy = require('archy')

## archy(obj, prefix='', opts={})

Return a string representation of `obj` with unicode pipe characters like how
`npm ls` looks.

`obj` should be a tree of nested objects with `'label'` and `'nodes'` fields.
`'label'` is a string of text to display at a node level and `'nodes'` is an
array of the descendents of the current node.

If a node is a string, that string will be used as the `'label'` and an empty
array of `'nodes'` will be used.

`prefix` gets prepended to all the lines and is used by the algorithm to
recursively update.

If `'label'` has newlines they will be indented at the present indentation level
with the current prefix.

To disable unicode results in favor of all-ansi output set `opts.unicode` to
`false`.

# install

With [npm](http://npmjs.org) do:

```
npm install archy
```

# license

MIT
©/index.jsÅtmodule.exports = function archy (obj, prefix, opts) {
    if (prefix === undefined) prefix = '';
    if (!opts) opts = {};
    var chr = function (s) {
        var chars = {
            'â”‚' : '|',
            'â””' : '`',
            'â”œ' : '+',
            'â”€' : '-',
            'â”¬' : '-'
        };
        return opts.unicode === false ? chars[s] : s;
    };
    
    if (typeof obj === 'string') obj = { label : obj };
    
    var nodes = obj.nodes || [];
    var lines = (obj.label || '').split('\n');
    var splitter = '\n' + prefix + (nodes.length ? chr('â”‚') : ' ') + ' ';
    
    return prefix
        + lines.join(splitter) + '\n'
        + nodes.map(function (node, ix) {
            var last = ix === nodes.length - 1;
            var more = node.nodes && node.nodes.length;
            var prefix_ = prefix + (last ? ' ' : chr('â”‚')) + ' ';
            
            return prefix
                + (last ? chr('â””') : chr('â”œ')) + chr('â”€')
                + (more ? chr('â”¬') : chr('â”€')) + ' '
                + archy(node, prefix_, opts).slice(prefix.length + 2)
            ;
        }).join('')
    ;
};
³/test/multi_line.jsÅàvar test = require('tape');
var archy = require('../');

test('multi-line', function (t) {
    var s = archy({
      label : 'beep\none\ntwo',
      nodes : [
        'ity',
        {
          label : 'boop',
          nodes : [
            {
              label : 'o_O\nwheee',
              nodes : [
                {
                  label : 'oh',
                  nodes : [ 'hello', 'puny\nmeat' ]
                },
                'creature'
              ]
            },
            'party\ntime!'
          ]
        }
      ]
    });
    t.equal(s, [
        'beep',
        'â”‚ one',
        'â”‚ two',
        'â”œâ”€â”€ ity',
        'â””â”€â”¬ boop',
        '  â”œâ”€â”¬ o_O',
        '  â”‚ â”‚ wheee',
        '  â”‚ â”œâ”€â”¬ oh',
        '  â”‚ â”‚ â”œâ”€â”€ hello',
        '  â”‚ â”‚ â””â”€â”€ puny',
        '  â”‚ â”‚     meat',
        '  â”‚ â””â”€â”€ creature',
        '  â””â”€â”€ party',
        '      time!',
        ''
    ].join('\n'));
    t.end();
});

é≥/test/index.test.js≈	û'use strict'

const test = require('tap').test
const build = require('..')

process.removeAllListeners('warning')

test('Create warning with zero parameter', t => {
  t.plan(3)

  const { create } = build()
  const buildWarnOpts = create('FastifyWarning', 'CODE', 'Not available')
  const opts = buildWarnOpts()
  t.equal(opts.name, 'FastifyWarning')
  t.equal(opts.message, 'Not available')
  t.equal(opts.code, 'CODE')
})

test('Create error with 1 parameter', t => {
  t.plan(3)

  const { create } = build()
  const buildWarningOpts = create('FastifyWarning', 'CODE', 'hey %s')
  const opts = buildWarningOpts('alice')
  t.equal(opts.name, 'FastifyWarning')
  t.equal(opts.message, 'hey alice')
  t.equal(opts.code, 'CODE')
})

test('Create error with 2 parameters', t => {
  t.plan(3)

  const { create } = build()
  const buildWarnOpts = create('FastifyWarning', 'CODE', 'hey %s, I like your %s')
  const opts = buildWarnOpts('alice', 'attitude')
  t.equal(opts.name, 'FastifyWarning')
  t.equal(opts.message, 'hey alice, I like your attitude')
  t.equal(opts.code, 'CODE')
})

test('Create error with 3 parameters', t => {
  t.plan(3)

  const { create } = build()
  const buildWarnOpts = create('FastifyWarning', 'CODE', 'hey %s, I like your %s %s')
  const opts = buildWarnOpts('alice', 'attitude', 'see you')
  t.equal(opts.name, 'FastifyWarning')
  t.equal(opts.message, 'hey alice, I like your attitude see you')
  t.equal(opts.code, 'CODE')
})

test('Should throw when error code has no fastify name', t => {
  t.plan(1)

  const { create } = build()

  t.throws(() => create(), new Error('Warning name must not be empty'))
})

test('Should throw when error has no code', t => {
  t.plan(1)

  const { create } = build()

  t.throws(() => create('name'), new Error('Warning code must not be empty'))
})

test('Should throw when error has no message', t => {
  t.plan(1)

  const { create } = build()

  t.throws(() => create('name', 'code'), new Error('Warning message must not be empty'))
})

test('Should throw if emit is called with unknown code ', t => {
  t.plan(1)

  const { emit } = build()

  t.throws(() => emit('CODE'), new Error('The code \'CODE\' does not exist'))
})

test('Cannot reuse the same code more than once', t => {
  t.plan(1)

  const { create } = build()
  create('FastifyWarning', 'CODE', 'Not available')

  t.throws(() => create('FastifyWarning', 'CODE', 'Not available'), new Error("The code 'CODE' already exist"))
})
π/.github/workflows/ci.yml≈name: CI

on:
  push:
    paths-ignore:
      - 'docs/**'
      - '*.md'
  pull_request:
    paths-ignore:
      - 'docs/**'
      - '*.md'

jobs:
  test:
    uses: fastify/workflows/.github/workflows/plugins-ci.yml@v3
    with:
      license-check: true
      lint: true
±/types/index.d.ts≈ïtype ProcessWarning = () => processWarning.Warning

declare namespace processWarning {
  export interface Warning {
    create(name: string, code: string, message: string): BuildWarnOptsFn,
    emit(cod: string, a?: any, b?: any, c?: any): void,
    emitted: Map<string, boolean>
  }

  export type BuildWarnOptsFn = (a?: any, b?: any, c?: any) => WarnOpts

  export interface WarnOpts {
    code: string;
    name: string;
    message: string;
  }

  export const processWarning: ProcessWarning
  export { processWarning as default }
}

declare function processWarning(...params: Parameters<ProcessWarning>): ReturnType<ProcessWarning>
export = processWarning
≤/test/jest.test.js≈/* global test, expect */
'use strict'

const build = require('..')

test('works with jest', done => {
  const { create, emit, emitted } = build()

  create('FastifyDeprecation', 'CODE', 'Hello %s')
  emit('CODE', 'world')

  // we cannot actually listen to process warning event
  // because jest messes with it (that's the point of this test)
  // we can only test it was emitted indirectly
  // and test no exception is raised
  setImmediate(() => {
    expect(emitted.get('CODE')).toBeTruthy()
    done()
  })
})
™/README.md≈
ß# process-warning

![CI](https://github.com/fastify/process-warning/workflows/CI/badge.svg)
[![NPM version](https://img.shields.io/npm/v/process-warning.svg?style=flat)](https://www.npmjs.com/package/process-warning)
[![js-standard-style](https://img.shields.io/badge/code%20style-standard-brightgreen.svg?style=flat)](https://standardjs.com/)

A small utility for generating consistent warning objects across your codebase.
It also exposes a utility for emitting those warnings, guaranteeing that they are issued only once.

This module is used by the [Fastify](https://fastify.io) framework and it was called `fastify-warning` prior to version 1.0.0.

### Install

```
npm i process-warning
```

### Usage

The module exports a builder function that returns a utility for creating warnings and emitting them.

```js
const warning = require('process-warning')()
```

#### Methods

```
warning.create(name, code, message)
```

- `name` (`string`, required) - The error name, you can access it later with `error.name`. For consistency, we recommend prefixing module error names with `{YourModule}Warning`
- `code` (`string`, required) - The warning code, you can access it later with `error.code`. For consistency, we recommend prefixing plugin error codes with `{ThreeLetterModuleName}_`, e.g. `FST_`. NOTE: codes should be all uppercase.
- `message` (`string`, required) - The warning message. You can also use interpolated strings for formatting the message.

The utility also contains an `emit` function that you can use for emitting the warnings you have previously created by passing their respective code. A warning is guaranteed to be emitted only once.

```
warning.emit(code [, a [, b [, c]]])
```

- `code` (`string`, required) - The warning code you intend to emit.
- `[, a [, b [, c]]]` (`any`, optional) - Parameters for string interpolation.

```js
const warning = require('process-warning')()
warning.create('FastifyWarning', 'FST_ERROR_CODE', 'message')
warning.emit('FST_ERROR_CODE')
```

How to use an interpolated string:
```js
const warning = require('process-warning')()
warning.create('FastifyWarning', 'FST_ERROR_CODE', 'Hello %s')
warning.emit('FST_ERROR_CODE', 'world')
```

The module also exports an `warning.emitted` [Map](https://developer.mozilla.org/it/docs/Web/JavaScript/Reference/Global_Objects/Map), which contains all the warnings already emitted. Useful for testing.
```js
const warning = require('process-warning')()
warning.create('FastifyWarning', 'FST_ERROR_CODE', 'Hello %s')
console.log(warning.emitted.get('FST_ERROR_CODE')) // false
warning.emit('FST_ERROR_CODE', 'world')
console.log(warning.emitted.get('FST_ERROR_CODE')) // true
```

## License

Licensed under [MIT](./LICENSE).
ß/.taprcƒ$files:
  - test/**/*[!jest].test.js
∂/types/index.test-d.ts≈ÿimport { expectType } from 'tsd'
import Warinig, { BuildWarnOptsFn, WarnOpts } from '..'

const warning = Warinig()
const buildWarnOpts = warning.create('FastifyWarning', 'CODE', 'message')
expectType<BuildWarnOptsFn>(buildWarnOpts)
const opts = buildWarnOpts()
expectType<WarnOpts>(opts)
expectType<string>(opts.code)
expectType<string>(opts.message)
expectType<string>(opts.name)

expectType<void>(warning.emit('CODE'))
expectType<Map<string, boolean>>(warning.emitted)
®/LICENSE≈#MIT License

Copyright (c) Fastify

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
©/index.js≈Ú'use strict'

const { format } = require('util')

function processWarning () {
  const codes = {}
  const emitted = new Map()

  function create (name, code, message) {
    if (!name) throw new Error('Warning name must not be empty')
    if (!code) throw new Error('Warning code must not be empty')
    if (!message) throw new Error('Warning message must not be empty')

    code = code.toUpperCase()

    if (codes[code] !== undefined) {
      throw new Error(`The code '${code}' already exist`)
    }

    function buildWarnOpts (a, b, c) {
      // more performant than spread (...) operator
      let formatted
      if (a && b && c) {
        formatted = format(message, a, b, c)
      } else if (a && b) {
        formatted = format(message, a, b)
      } else if (a) {
        formatted = format(message, a)
      } else {
        formatted = message
      }

      return {
        code,
        name,
        message: formatted
      }
    }

    emitted.set(code, false)
    codes[code] = buildWarnOpts

    return codes[code]
  }

  function emit (code, a, b, c) {
    if (emitted.get(code) === true) return
    if (codes[code] === undefined) throw new Error(`The code '${code}' does not exist`)
    emitted.set(code, true)

    const warning = codes[code](a, b, c)
    process.emitWarning(warning.message, warning.name, warning.code)
  }

  return {
    create,
    emit,
    emitted
  }
}

module.exports = processWarning
module.exports.default = processWarning
module.exports.processWarning = processWarning
≠/package.json≈À{
  "name": "process-warning",
  "version": "2.1.0",
  "description": "A small utility for creating warnings and emitting them.",
  "main": "index.js",
  "types": "types/index.d.ts",
  "scripts": {
    "lint": "standard",
    "test": "npm run test:unit && npm run test:jest && npm run test:typescript",
    "test:jest": "jest jest.test.js",
    "test:unit": "tap",
    "test:typescript": "tsd"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/fastify/process-warning.git"
  },
  "keywords": [
    "fastify",
    "error",
    "warning",
    "utility",
    "plugin",
    "emit",
    "once"
  ],
  "author": "Tomas Della Vedova",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/fastify/fastify-warning/issues"
  },
  "homepage": "https://github.com/fastify/fastify-warning#readme",
  "devDependencies": {
    "benchmark": "^2.1.4",
    "jest": "^29.0.1",
    "standard": "^17.0.0",
    "tap": "^16.3.0",
    "tsd": "^0.24.1"
  }
}
º/test/emit-once-only.test.js≈R'use strict'

const test = require('tap').test
const build = require('..')

test('emit should emit a given code only once', t => {
  t.plan(4)

  const { create, emit, emitted } = build()

  process.on('warning', onWarning)
  function onWarning (warning) {
    t.equal(warning.name, 'FastifyDeprecation')
    t.equal(warning.code, 'CODE')
    t.equal(warning.message, 'Hello world')
    t.ok(emitted.get('CODE'))
  }

  create('FastifyDeprecation', 'CODE', 'Hello world')
  emit('CODE')
  emit('CODE')
  setImmediate(() => {
    process.removeListener('warning', onWarning)
    t.end()
  })
})
Ÿ&/test/emit-interpolated-string.test.js≈W'use strict'

const test = require('tap').test
const build = require('..')

test('emit with interpolated string', t => {
  t.plan(4)
  const { create, emit, emitted } = build()

  process.on('warning', onWarning)
  function onWarning (warning) {
    t.equal(warning.name, 'FastifyDeprecation')
    t.equal(warning.code, 'CODE')
    t.equal(warning.message, 'Hello world')
    t.ok(emitted.get('CODE'))
  }

  create('FastifyDeprecation', 'CODE', 'Hello %s')
  emit('CODE', 'world')
  emit('CODE', 'world')

  setImmediate(() => {
    process.removeListener('warning', onWarning)
    t.end()
  })
})
∑/.github/dependabot.yml≈version: 2
updates:
  - package-ecosystem: "github-actions"
    directory: "/"
    schedule:
      interval: "monthly"
    open-pull-requests-limit: 10

  - package-ecosystem: "npm"
    directory: "/"
    schedule:
      interval: "weekly"
    open-pull-requests-limit: 10
≥/benchmarks/warn.js≈‰'use strict'

const { Suite } = require('benchmark')
const warning = require('..')()

warning.create('FastifyWarning', 'FST_ERROR_CODE_1', 'message')
warning.create('FastifyWarning', 'FST_ERROR_CODE_2', 'message')
warning.create('FastifyWarning', 'FST_ERROR_CODE_3', 'message')
new Suite()
  .add('warn', function () {
    warning.emit('FST_ERROR_CODE_1')
    warning.emit('FST_ERROR_CODE_3')
  })
  .on('cycle', function (event) {
    console.log(String(event.target))
  })
  .run()

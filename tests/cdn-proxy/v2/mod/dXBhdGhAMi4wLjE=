…«/upath.d.tsÅ#declare module "upath" {

  /**
   * A parsed path object generated by path.parse() or consumed by path.format().
   */
  export interface ParsedPath {
    /**
     * The root of the path such as '/' or 'c:\'
     */
    root: string;
    /**
     * The full directory path such as '/home/user/dir' or 'c:\path\dir'
     */
    dir: string;
    /**
     * The file name including extension (if any) such as 'index.html'
     */
    base: string;
    /**
     * The file extension (if any) such as '.html'
     */
    ext: string;
    /**
     * The file name without extension (if any) such as 'index'
     */
    name: string;
  }

  /**
   * Version of the library
   */
  export var VERSION: string;

  /**
   * Just converts all `to/` and consolidates duplicates, without performing any normalization.
   *
   * @param p string path to convert to unix.
   */
  export function toUnix(p: string): string;

  /**
   * Exactly like path.normalize(path), but it keeps the first meaningful ./.
   *
   * Note that the unix / is returned everywhere, so windows \ is always converted to unix /.
   *
   * @param p string path to normalize.
   */
  export function normalizeSafe(p: string): string;

  /**
   * Exactly like path.normalizeSafe(path), but it trims any useless ending /.
   *
   * @param p string path to normalize
   */
  export function normalizeTrim(p: string): string;

  /**
   * Exactly like path.join(), but it keeps the first meaningful ./.
   *
   * Note that the unix / is returned everywhere, so windows \ is always converted to unix /.
   *
   * @param paths string paths to join
   */
  export function joinSafe(...p: any[]): string;

  /**
   * Adds .ext to filename, but only if it doesn't already have the exact extension.
   *
   * @param file string filename to add extension to
   * @param ext string extension to add
   */
  export function addExt(file: string, ext: string): string;

  /**
   * Trims a filename's extension.
   *
   * Extensions are considered to be up to maxSize chars long, counting the dot (defaults to 7).
   *
   * An Array of ignoreExts (eg ['.min']) prevents these from being considered as extension, thus are not trimmed.
   *
   * @param filename string filename to trim it's extension
   * @param ignoreExts array extensions to ignore
   * @param maxSize number max length of the extension
   */
  export function trimExt(filename: string, ignoreExts?: string[], maxSize?: number): string;

  /**
   * Removes the specific ext extension from filename, if it has it. Otherwise it leaves it as is. As in all upath functions, it be .ext or ext.
   *
   * @param file string filename to remove extension to
   * @param ext string extension to remove
   */
  export function removeExt(filename: string, ext: string): string;

  /**
   * Changes a filename's extension to ext. If it has no (valid) extension, it adds it.
   *
   * Valid extensions are considered to be up to maxSize chars long, counting the dot (defaults to 7).
   *
   * An Array of ignoreExts (eg ['.min']) prevents these from being considered as extension, thus are not changed - the new extension is added instead.
   *
   * @param filename string filename to change it's extension
   * @param ext string extension to change to
   * @param ignoreExts array extensions to ignore
   * @param maxSize number max length of the extension
   */
  export function changeExt(filename: string, ext: string, ignoreExts?: string[], maxSize?: number): string;

  /**
   * Adds .ext to filename, only if it doesn't already have any old extension.
   *
   * (Old) extensions are considered to be up to maxSize chars long, counting the dot (defaults to 7).
   *
   * An Array of ignoreExts (eg ['.min']) will force adding default .ext even if one of these is present.
   *
   * @param filename string filename to default to it's extension
   * @param ext string extension to default to
   * @param ignoreExts array extensions to ignore
   * @param maxSize number max length of the extension
   */
  export function defaultExt(filename: string, ext: string, ignoreExts?: string[], maxSize?: number): string;

  /**
   * Normalize a string path, reducing '..' and '.' parts.
   * When multiple slashes are found, they're replaced by a single one; when the path contains a trailing slash, it is preserved. On Windows backslashes are used.
   *
   * @param p string path to normalize.
   */
  export function normalize(p: string): string;
  /**
   * Join all arguments together and normalize the resulting path.
   * Arguments must be strings. In v0.8, non-string arguments were silently ignored. In v0.10 and up, an exception is thrown.
   *
   * @param paths string paths to join.
   */
  export function join(...paths: any[]): string;
  /**
   * Join all arguments together and normalize the resulting path.
   * Arguments must be strings. In v0.8, non-string arguments were silently ignored. In v0.10 and up, an exception is thrown.
   *
   * @param paths string paths to join.
   */
  export function join(...paths: string[]): string;
  /**
   * The right-most parameter is considered {to}.  Other parameters are considered an array of {from}.
   *
   * Starting from leftmost {from} parameter, resolves {to} to an absolute path.
   *
   * If {to} isn't already absolute, {from} arguments are prepended in right to left order, until an absolute path is found. If after using all {from} paths still no absolute path is found, the current working directory is used as well. The resulting path is normalized, and trailing slashes are removed unless the path gets resolved to the root directory.
   *
   * @param pathSegments string paths to join.  Non-string arguments are ignored.
   */
  export function resolve(...pathSegments: any[]): string;
  /**
   * Determines whether {path} is an absolute path. An absolute path will always resolve to the same location, regardless of the working directory.
   *
   * @param path path to test.
   */
  export function isAbsolute(path: string): boolean;
  /**
   * Solve the relative path from {from} to {to}.
   * At times we have two absolute paths, and we need to derive the relative path from one to the other. This is actually the reverse transform of path.resolve.
   *
   * @param from
   * @param to
   */
  export function relative(from: string, to: string): string;
  /**
   * Return the directory name of a path. Similar to the Unix dirname command.
   *
   * @param p the path to evaluate.
   */
  export function dirname(p: string): string;
  /**
   * Return the last portion of a path. Similar to the Unix basename command.
   * Often used to extract the file name from a fully qualified path.
   *
   * @param p the path to evaluate.
   * @param ext optionally, an extension to remove from the result.
   */
  export function basename(p: string, ext?: string): string;
  /**
   * Return the extension of the path, from the last '.' to end of string in the last portion of the path.
   * If there is no '.' in the last portion of the path or the first character of it is '.', then it returns an empty string
   *
   * @param p the path to evaluate.
   */
  export function extname(p: string): string;
  /**
   * The platform-specific file separator. '\\' or '/'.
   */
  export var sep: string;
  /**
   * The platform-specific file delimiter. ';' or ':'.
   */
  export var delimiter: string;
  /**
   * Returns an object from a path string - the opposite of format().
   *
   * @param pathString path to evaluate.
   */
  export function parse(pathString: string): ParsedPath;
  /**
   * Returns a path string from an object - the opposite of parse().
   *
   * @param pathString path to evaluate.
   */
  export function format(pathObject: ParsedPath): string;

  export module posix {
    export function normalize(p: string): string;
    export function join(...paths: any[]): string;
    export function resolve(...pathSegments: any[]): string;
    export function isAbsolute(p: string): boolean;
    export function relative(from: string, to: string): string;
    export function dirname(p: string): string;
    export function basename(p: string, ext?: string): string;
    export function extname(p: string): string;
    export var sep: string;
    export var delimiter: string;
    export function parse(p: string): ParsedPath;
    export function format(pP: ParsedPath): string;
  }

  export module win32 {
    export function normalize(p: string): string;
    export function join(...paths: any[]): string;
    export function resolve(...pathSegments: any[]): string;
    export function isAbsolute(p: string): boolean;
    export function relative(from: string, to: string): string;
    export function dirname(p: string): string;
    export function basename(p: string, ext?: string): string;
    export function extname(p: string): string;
    export var sep: string;
    export var delimiter: string;
    export function parse(p: string): ParsedPath;
    export function format(pP: ParsedPath): string;
  }
}
´/build/code/upath.jsÅ/**
* upath http://github.com/anodynos/upath/
*
* A proxy to `path`, replacing `\` with `/` for all results (supports UNC paths) & new methods to normalize & join keeping leading `./` and add, change, default, trim file extensions.
* Version 2.0.1 - Compiled on 2020-11-07 16:59:47
* Repository git://github.com/anodynos/upath
* Copyright(c) 2020 Angelos Pikoulas <agelos.pikoulas@gmail.com>
* License MIT
*/

// Generated by uRequire v0.7.0-beta.33 target: 'lib' template: 'nodejs'


var VERSION = '2.0.1'; // injected by urequire-rc-inject-version

var extraFn, extraFunctions, isFunction, isString, isValidExt, name, path, propName, propValue, toUnix, upath, slice = [].slice, indexOf = [].indexOf || function (item) {
    for (var i = 0, l = this.length; i < l; i++) {
      if (i in this && this[i] === item)
        return i;
    }
    return -1;
  }, hasProp = {}.hasOwnProperty;
path = require("path");
isFunction = function (val) {
  return typeof val === "function";
};
isString = function (val) {
  return typeof val === "string" || !!val && typeof val === "object" && Object.prototype.toString.call(val) === "[object String]";
};
upath = exports;
upath.VERSION = typeof VERSION !== "undefined" && VERSION !== null ? VERSION : "NO-VERSION";
toUnix = function (p) {
  p = p.replace(/\\/g, "/");
  p = p.replace(/(?<!^)\/+/g, "/");
  return p;
};
for (propName in path) {
  propValue = path[propName];
  if (isFunction(propValue)) {
    upath[propName] = function (propName) {
      return function () {
        var args, result;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        args = args.map(function (p) {
          if (isString(p)) {
            return toUnix(p);
          } else {
            return p;
          }
        });
        result = path[propName].apply(path, args);
        if (isString(result)) {
          return toUnix(result);
        } else {
          return result;
        }
      };
    }(propName);
  } else {
    upath[propName] = propValue;
  }
}
upath.sep = "/";
extraFunctions = {
  toUnix: toUnix,
  normalizeSafe: function (p) {
    var result;
    p = toUnix(p);
    result = upath.normalize(p);
    if (p.startsWith("./") && !result.startsWith("./") && !result.startsWith("..")) {
      result = "./" + result;
    } else if (p.startsWith("//") && !result.startsWith("//")) {
      if (p.startsWith("//./")) {
        result = "//." + result;
      } else {
        result = "/" + result;
      }
    }
    return result;
  },
  normalizeTrim: function (p) {
    p = upath.normalizeSafe(p);
    if (p.endsWith("/")) {
      return p.slice(0, +(p.length - 2) + 1 || 9000000000);
    } else {
      return p;
    }
  },
  joinSafe: function () {
    var p, p0, result;
    p = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    result = upath.join.apply(null, p);
    if (p.length > 0) {
      p0 = toUnix(p[0]);
      if (p0.startsWith("./") && !result.startsWith("./") && !result.startsWith("..")) {
        result = "./" + result;
      } else if (p0.startsWith("//") && !result.startsWith("//")) {
        if (p0.startsWith("//./")) {
          result = "//." + result;
        } else {
          result = "/" + result;
        }
      }
    }
    return result;
  },
  addExt: function (file, ext) {
    if (!ext) {
      return file;
    } else {
      if (ext[0] !== ".") {
        ext = "." + ext;
      }
      return file + (file.endsWith(ext) ? "" : ext);
    }
  },
  trimExt: function (filename, ignoreExts, maxSize) {
    var oldExt;
    if (maxSize == null) {
      maxSize = 7;
    }
    oldExt = upath.extname(filename);
    if (isValidExt(oldExt, ignoreExts, maxSize)) {
      return filename.slice(0, +(filename.length - oldExt.length - 1) + 1 || 9000000000);
    } else {
      return filename;
    }
  },
  removeExt: function (filename, ext) {
    if (!ext) {
      return filename;
    } else {
      ext = ext[0] === "." ? ext : "." + ext;
      if (upath.extname(filename) === ext) {
        return upath.trimExt(filename, [], ext.length);
      } else {
        return filename;
      }
    }
  },
  changeExt: function (filename, ext, ignoreExts, maxSize) {
    if (maxSize == null) {
      maxSize = 7;
    }
    return upath.trimExt(filename, ignoreExts, maxSize) + (!ext ? "" : ext[0] === "." ? ext : "." + ext);
  },
  defaultExt: function (filename, ext, ignoreExts, maxSize) {
    var oldExt;
    if (maxSize == null) {
      maxSize = 7;
    }
    oldExt = upath.extname(filename);
    if (isValidExt(oldExt, ignoreExts, maxSize)) {
      return filename;
    } else {
      return upath.addExt(filename, ext);
    }
  }
};
isValidExt = function (ext, ignoreExts, maxSize) {
  if (ignoreExts == null) {
    ignoreExts = [];
  }
  return ext && ext.length <= maxSize && indexOf.call(ignoreExts.map(function (e) {
    return (e && e[0] !== "." ? "." : "") + e;
  }), ext) < 0;
};
for (name in extraFunctions) {
  if (!hasProp.call(extraFunctions, name))
    continue;
  extraFn = extraFunctions[name];
  if (upath[name] !== void 0) {
    throw new Error("path." + name + " already exists.");
  } else {
    upath[name] = extraFn;
  }
}

;­/package.jsonÅñ{
  "name": "upath",
  "description": "A proxy to `path`, replacing `\\` with `/` for all results (supports UNC paths) & new methods to normalize & join keeping leading `./` and add, change, default, trim file extensions.",
  "version": "2.0.1",
  "homepage": "http://github.com/anodynos/upath/",
  "author": {
    "name": "Angelos Pikoulas",
    "email": "agelos.pikoulas@gmail.com"
  },
  "license": "MIT",
  "keywords": [
    "path",
    "unix",
    "windows",
    "extension",
    "file extension",
    "replace extension",
    "change extension",
    "trim extension",
    "add extension",
    "default extension",
    "UNC paths"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/anodynos/upath"
  },
  "bugs": {
    "url": "http://github.com/anodynos/upath/issues",
    "email": "agelos.pikoulas@gmail.com"
  },
  "main": "./build/code/upath.js",
  "types": "./upath.d.ts",
  "preferGlobal": false,
  "scripts": {
    "test": "npx grunt",
    "build": "npx grunt lib"
  },
  "directories": {
    "doc": "./doc",
    "dist": "./build"
  },
  "engines": {
    "node": ">=4",
    "yarn": "*"
  },
  "devDependencies": {
    "chai": "~4.0.2",
    "coffee-script": "1.12.6",
    "grunt": "0.4.5",
    "grunt-contrib-watch": "^1.1.0",
    "grunt-urequire": "0.7.x",
    "lodash": "^4.17.20",
    "mocha": "~3.4.2",
    "uberscore": "0.0.19",
    "underscore.string": "^3.3.5",
    "urequire": "0.7.0-beta.33",
    "urequire-ab-specrunner": "^0.2.5",
    "urequire-rc-inject-version": "^0.1.6"
  }
}
ª/readme.mdÅN# upath v2.0.1

[![Build Status](https://travis-ci.org/anodynos/upath.svg?branch=master)](https://travis-ci.org/anodynos/upath)
[![Up to date Status](https://david-dm.org/anodynos/upath.png)](https://david-dm.org/anodynos/upath)

A drop-in replacement / proxy to nodejs's `path` that:

  * Replaces the windows `\` with the unix `/` in all string params & results. This has significant positives - see below.

  * Adds **filename extensions** functions `addExt`, `trimExt`, `removeExt`, `changeExt`, and `defaultExt`.

  * Add a `normalizeSafe` function to preserve any meaningful leading `./` & a `normalizeTrim` which additionally trims any useless ending `/`.

  * Plus a helper `toUnix` that simply converts `\` to `/` and consolidates duplicates.

**Useful note: these docs are actually auto generated from [specs](https://github.com/anodynos/upath/blob/master/source/spec/upath-spec.coffee), running on Linux.**

Notes:

 * `upath.sep` is set to `'/'` for seamless replacement (as of 1.0.3).

 * upath has no runtime dependencies, except built-in `path` (as of 1.0.4)

 * travis-ci tested in node versions 8 to 14 (on linux)

 * Also tested on Windows / node@12.18.0 (without CI)  

History brief:

 * 1.x   : Initial release and various features / fixes

 * 2.0.0 : Adding UNC paths support - see https://github.com/anodynos/upath/pull/38

## Why ?

Normal `path` doesn't convert paths to a unified format (ie `/`) before calculating paths (`normalize`, `join`), which can lead to numerous problems.
Also path joining, normalization etc on the two formats is not consistent, depending on where it runs. Running `path` on Windows yields different results than when it runs on Linux / Mac.

In general, if you code your paths logic while developing on Unix/Mac and it runs on Windows, you may run into problems when using `path`.

Note that using **Unix `/` on Windows** works perfectly inside nodejs (and other languages), so there's no reason to stick to the Windows legacy at all.

##### Examples / specs
        

Check out the different (improved) behavior to vanilla `path`:

    `upath.normalize(path)`        --returns-->

          âœ“ `'c:/windows/nodejs/path'`         --->      `'c:/windows/nodejs/path'`  // equal to `path.normalize()`
          âœ“ `'c:/windows/../nodejs/path'`      --->              `'c:/nodejs/path'`  // equal to `path.normalize()`
          âœ“ `'c:\\windows\\nodejs\\path'`      --->      `'c:/windows/nodejs/path'`  // `path.normalize()` gives `'c:\windows\nodejs\path'`
          âœ“ `'c:\\windows\\..\\nodejs\\path'`  --->              `'c:/nodejs/path'`  // `path.normalize()` gives `'c:\windows\..\nodejs\path'`
          âœ“ `'/windows\\unix/mixed'`           --->         `'/windows/unix/mixed'`  // `path.normalize()` gives `'/windows\unix/mixed'`
          âœ“ `'\\windows//unix/mixed'`          --->         `'/windows/unix/mixed'`  // `path.normalize()` gives `'\windows/unix/mixed'`
          âœ“ `'\\windows\\..\\unix/mixed/'`     --->                `'/unix/mixed/'`  // `path.normalize()` gives `'\windows\..\unix/mixed/'`
        

Joining paths can also be a problem:

    `upath.join(paths...)`        --returns-->

          âœ“ `'some/nodejs/deep', '../path'`       --->       `'some/nodejs/path'`  // equal to `path.join()`
          âœ“ `'some/nodejs\\windows', '../path'`   --->       `'some/nodejs/path'`  // `path.join()` gives `'some/path'`
          âœ“ `'some\\windows\\only', '..\\path'`   --->      `'some/windows/path'`  // `path.join()` gives `'some\windows\only/..\path'`
        

Parsing with `path.parse()` should also be consistent across OSes:

  `upath.parse(path)`        --returns-->

          âœ“ `'c:\Windows\Directory\somefile.ext'`      ---> `{ root: '', dir: 'c:/Windows/Directory', base: 'somefile.ext', ext: '.ext', name: 'somefile'
}`
                                    // `path.parse()` gives `'{ root: '', dir: '', base: 'c:\\Windows\\Directory\\somefile.ext', ext: '.ext', name: 'c:\\Windows\\Directory\\somefile'
}'`
          âœ“ `'/root/of/unix/somefile.ext'`             ---> `{ root: '/', dir: '/root/of/unix', base: 'somefile.ext', ext: '.ext', name: 'somefile'
}`  // equal to `path.parse()`
    

## Added functions
      

#### `upath.toUnix(path)`

Just converts all `` to `/` and consolidates duplicates, without performing any normalization.

##### Examples / specs

    `upath.toUnix(path)`        --returns-->

        âœ“ `'.//windows\//unix//mixed////'`      --->         `'./windows/unix/mixed/'`
        âœ“ `'..///windows\..\\unix/mixed'`       --->      `'../windows/../unix/mixed'`
      

#### `upath.normalizeSafe(path)`

Exactly like `path.normalize(path)`, but it keeps the first meaningful `./` or `//`.

Note that the unix `/` is returned everywhere, so windows `\` is always converted to unix `/`.

##### Examples / specs & how it differs from vanilla `path`

    `upath.normalizeSafe(path)`        --returns-->

        âœ“ `''`                               --->                              `'.'`  // equal to `path.normalize()`
        âœ“ `'.'`                              --->                              `'.'`  // equal to `path.normalize()`
        âœ“ `'./'`                             --->                             `'./'`  // equal to `path.normalize()`
        âœ“ `'.//'`                            --->                             `'./'`  // equal to `path.normalize()`
        âœ“ `'.\\'`                            --->                             `'./'`  // `path.normalize()` gives `'.\'`
        âœ“ `'.\\//'`                          --->                             `'./'`  // `path.normalize()` gives `'.\/'`
        âœ“ `'./..'`                           --->                             `'..'`  // equal to `path.normalize()`
        âœ“ `'.//..'`                          --->                             `'..'`  // equal to `path.normalize()`
        âœ“ `'./../'`                          --->                            `'../'`  // equal to `path.normalize()`
        âœ“ `'.\\..\\'`                        --->                            `'../'`  // `path.normalize()` gives `'.\..\'`
        âœ“ `'./../dep'`                       --->                         `'../dep'`  // equal to `path.normalize()`
        âœ“ `'../dep'`                         --->                         `'../dep'`  // equal to `path.normalize()`
        âœ“ `'../path/dep'`                    --->                    `'../path/dep'`  // equal to `path.normalize()`
        âœ“ `'../path/../dep'`                 --->                         `'../dep'`  // equal to `path.normalize()`
        âœ“ `'dep'`                            --->                            `'dep'`  // equal to `path.normalize()`
        âœ“ `'path//dep'`                      --->                       `'path/dep'`  // equal to `path.normalize()`
        âœ“ `'./dep'`                          --->                          `'./dep'`  // `path.normalize()` gives `'dep'`
        âœ“ `'./path/dep'`                     --->                     `'./path/dep'`  // `path.normalize()` gives `'path/dep'`
        âœ“ `'./path/../dep'`                  --->                          `'./dep'`  // `path.normalize()` gives `'dep'`
        âœ“ `'.//windows\\unix/mixed/'`        --->          `'./windows/unix/mixed/'`  // `path.normalize()` gives `'windows\unix/mixed/'`
        âœ“ `'..//windows\\unix/mixed'`        --->          `'../windows/unix/mixed'`  // `path.normalize()` gives `'../windows\unix/mixed'`
        âœ“ `'windows\\unix/mixed/'`           --->            `'windows/unix/mixed/'`  // `path.normalize()` gives `'windows\unix/mixed/'`
        âœ“ `'..//windows\\..\\unix/mixed'`    --->                  `'../unix/mixed'`  // `path.normalize()` gives `'../windows\..\unix/mixed'`
        âœ“ `'\\\\server\\share\\file'`        --->            `'//server/share/file'`  // `path.normalize()` gives `'\\server\share\file'`
        âœ“ `'//server/share/file'`            --->            `'//server/share/file'`  // `path.normalize()` gives `'/server/share/file'`
        âœ“ `'\\\\?\\UNC\\server\\share\\file'` --->      `'//?/UNC/server/share/file'`  // `path.normalize()` gives `'\\?\UNC\server\share\file'`
        âœ“ `'\\\\LOCALHOST\\c$\\temp\\file'`  --->       `'//LOCALHOST/c$/temp/file'`  // `path.normalize()` gives `'\\LOCALHOST\c$\temp\file'`
        âœ“ `'\\\\?\\c:\\temp\\file'`          --->               `'//?/c:/temp/file'`  // `path.normalize()` gives `'\\?\c:\temp\file'`
        âœ“ `'\\\\.\\c:\\temp\\file'`          --->               `'//./c:/temp/file'`  // `path.normalize()` gives `'\\.\c:\temp\file'`
        âœ“ `'//./c:/temp/file'`               --->               `'//./c:/temp/file'`  // `path.normalize()` gives `'/c:/temp/file'`
        âœ“ `'////\\.\\c:/temp\\//file'`       --->               `'//./c:/temp/file'`  // `path.normalize()` gives `'/\.\c:/temp\/file'`
      

#### `upath.normalizeTrim(path)`

Exactly like `path.normalizeSafe(path)`, but it trims any useless ending `/`.

##### Examples / specs

    `upath.normalizeTrim(path)`        --returns-->

        âœ“ `'./'`                          --->                         `'.'`  // `upath.normalizeSafe()` gives `'./'`
        âœ“ `'./../'`                       --->                        `'..'`  // `upath.normalizeSafe()` gives `'../'`
        âœ“ `'./../dep/'`                   --->                    `'../dep'`  // `upath.normalizeSafe()` gives `'../dep/'`
        âœ“ `'path//dep\\'`                 --->                  `'path/dep'`  // `upath.normalizeSafe()` gives `'path/dep/'`
        âœ“ `'.//windows\\unix/mixed/'`     --->      `'./windows/unix/mixed'`  // `upath.normalizeSafe()` gives `'./windows/unix/mixed/'`
      

#### `upath.joinSafe([path1][, path2][, ...])`

Exactly like `path.join()`, but it keeps the first meaningful `./` or `//`.

Note that the unix `/` is returned everywhere, so windows `\` is always converted to unix `/`.

##### Examples / specs & how it differs from vanilla `path`

    `upath.joinSafe(path)`        --returns-->

        âœ“ `'some/nodejs/deep', '../path'`                --->           `'some/nodejs/path'`  // equal to `path.join()`
        âœ“ `'./some/local/unix/', '../path'`              --->          `'./some/local/path'`  // `path.join()` gives `'some/local/path'`
        âœ“ `'./some\\current\\mixed', '..\\path'`         --->        `'./some/current/path'`  // `path.join()` gives `'some\current\mixed/..\path'`
        âœ“ `'../some/relative/destination', '..\\path'`   --->      `'../some/relative/path'`  // `path.join()` gives `'../some/relative/destination/..\path'`
        âœ“ `'\\\\server\\share\\file', '..\\path'`        --->        `'//server/share/path'`  // `path.join()` gives `'\\server\share\file/..\path'`
        âœ“ `'\\\\.\\c:\\temp\\file', '..\\path'`          --->           `'//./c:/temp/path'`  // `path.join()` gives `'\\.\c:\temp\file/..\path'`
        âœ“ `'//server/share/file', '../path'`             --->        `'//server/share/path'`  // `path.join()` gives `'/server/share/path'`
        âœ“ `'//./c:/temp/file', '../path'`                --->           `'//./c:/temp/path'`  // `path.join()` gives `'/c:/temp/path'`
    

## Added functions for *filename extension* manipulation.

**Happy notes:**

  In all functions you can:

  * use both `.ext` & `ext` - the dot `.` on the extension is always adjusted correctly.

  * omit the `ext` param (pass null/undefined/empty string) and the common sense thing will happen.

  * ignore specific extensions from being considered as valid ones (eg `.min`, `.dev` `.aLongExtIsNotAnExt` etc), hence no trimming or replacement takes place on them.

       

#### `upath.addExt(filename, [ext])`

Adds `.ext` to `filename`, but only if it doesn't already have the exact extension.

##### Examples / specs

    `upath.addExt(filename, 'js')`     --returns-->

        âœ“ `'myfile/addExt'`           --->           `'myfile/addExt.js'`
        âœ“ `'myfile/addExt.txt'`       --->       `'myfile/addExt.txt.js'`
        âœ“ `'myfile/addExt.js'`        --->           `'myfile/addExt.js'`
        âœ“ `'myfile/addExt.min.'`      --->      `'myfile/addExt.min..js'`
        

It adds nothing if no `ext` param is passed.

    `upath.addExt(filename)`           --returns-->

          âœ“ `'myfile/addExt'`           --->              `'myfile/addExt'`
          âœ“ `'myfile/addExt.txt'`       --->          `'myfile/addExt.txt'`
          âœ“ `'myfile/addExt.js'`        --->           `'myfile/addExt.js'`
          âœ“ `'myfile/addExt.min.'`      --->         `'myfile/addExt.min.'`
      

#### `upath.trimExt(filename, [ignoreExts], [maxSize=7])`

Trims a filename's extension.

  * Extensions are considered to be up to `maxSize` chars long, counting the dot (defaults to 7).

  * An `Array` of `ignoreExts` (eg `['.min']`) prevents these from being considered as extension, thus are not trimmed.

##### Examples / specs

    `upath.trimExt(filename)`          --returns-->

        âœ“ `'my/trimedExt.txt'`             --->                 `'my/trimedExt'`
        âœ“ `'my/trimedExt'`                 --->                 `'my/trimedExt'`
        âœ“ `'my/trimedExt.min'`             --->                 `'my/trimedExt'`
        âœ“ `'my/trimedExt.min.js'`          --->             `'my/trimedExt.min'`
        âœ“ `'../my/trimedExt.longExt'`      --->      `'../my/trimedExt.longExt'`
        

It is ignoring `.min` & `.dev` as extensions, and considers exts with up to 8 chars.

    `upath.trimExt(filename, ['min', '.dev'], 8)`          --returns-->

          âœ“ `'my/trimedExt.txt'`              --->                  `'my/trimedExt'`
          âœ“ `'my/trimedExt.min'`              --->              `'my/trimedExt.min'`
          âœ“ `'my/trimedExt.dev'`              --->              `'my/trimedExt.dev'`
          âœ“ `'../my/trimedExt.longExt'`       --->               `'../my/trimedExt'`
          âœ“ `'../my/trimedExt.longRExt'`      --->      `'../my/trimedExt.longRExt'`
      

#### `upath.removeExt(filename, ext)`

Removes the specific `ext` extension from filename, if it has it. Otherwise it leaves it as is.
As in all upath functions, it be `.ext` or `ext`.

##### Examples / specs

    `upath.removeExt(filename, '.js')`          --returns-->

        âœ“ `'removedExt.js'`          --->          `'removedExt'`
        âœ“ `'removedExt.txt.js'`      --->      `'removedExt.txt'`
        âœ“ `'notRemoved.txt'`         --->      `'notRemoved.txt'`
      

It does not care about the length of exts.

    `upath.removeExt(filename, '.longExt')`          --returns-->

        âœ“ `'removedExt.longExt'`          --->          `'removedExt'`
        âœ“ `'removedExt.txt.longExt'`      --->      `'removedExt.txt'`
        âœ“ `'notRemoved.txt'`              --->      `'notRemoved.txt'`
      

#### `upath.changeExt(filename, [ext], [ignoreExts], [maxSize=7])`

Changes a filename's extension to `ext`. If it has no (valid) extension, it adds it.

  * Valid extensions are considered to be up to `maxSize` chars long, counting the dot (defaults to 7).

  * An `Array` of `ignoreExts` (eg `['.min']`) prevents these from being considered as extension, thus are not changed - the new extension is added instead.

##### Examples / specs

    `upath.changeExt(filename, '.js')`  --returns-->

        âœ“ `'my/module.min'`            --->                `'my/module.js'`
        âœ“ `'my/module.coffee'`         --->                `'my/module.js'`
        âœ“ `'my/module'`                --->                `'my/module.js'`
        âœ“ `'file/withDot.'`            --->             `'file/withDot.js'`
        âœ“ `'file/change.longExt'`      --->      `'file/change.longExt.js'`
        

If no `ext` param is given, it trims the current extension (if any).

    `upath.changeExt(filename)`        --returns-->

          âœ“ `'my/module.min'`            --->                   `'my/module'`
          âœ“ `'my/module.coffee'`         --->                   `'my/module'`
          âœ“ `'my/module'`                --->                   `'my/module'`
          âœ“ `'file/withDot.'`            --->                `'file/withDot'`
          âœ“ `'file/change.longExt'`      --->         `'file/change.longExt'`
        

It is ignoring `.min` & `.dev` as extensions, and considers exts with up to 8 chars.

    `upath.changeExt(filename, 'js', ['min', '.dev'], 8)`        --returns-->

          âœ“ `'my/module.coffee'`          --->                 `'my/module.js'`
          âœ“ `'file/notValidExt.min'`      --->      `'file/notValidExt.min.js'`
          âœ“ `'file/notValidExt.dev'`      --->      `'file/notValidExt.dev.js'`
          âœ“ `'file/change.longExt'`       --->               `'file/change.js'`
          âœ“ `'file/change.longRExt'`      --->      `'file/change.longRExt.js'`
      

#### `upath.defaultExt(filename, [ext], [ignoreExts], [maxSize=7])`

Adds `.ext` to `filename`, only if it doesn't already have _any_ *old* extension.

  * (Old) extensions are considered to be up to `maxSize` chars long, counting the dot (defaults to 7).

  * An `Array` of `ignoreExts` (eg `['.min']`) will force adding default `.ext` even if one of these is present.

##### Examples / specs

    `upath.defaultExt(filename, 'js')`   --returns-->

        âœ“ `'fileWith/defaultExt'`              --->              `'fileWith/defaultExt.js'`
        âœ“ `'fileWith/defaultExt.js'`           --->              `'fileWith/defaultExt.js'`
        âœ“ `'fileWith/defaultExt.min'`          --->             `'fileWith/defaultExt.min'`
        âœ“ `'fileWith/defaultExt.longExt'`      --->      `'fileWith/defaultExt.longExt.js'`
        

If no `ext` param is passed, it leaves filename intact.

    `upath.defaultExt(filename)`       --returns-->

          âœ“ `'fileWith/defaultExt'`              --->                 `'fileWith/defaultExt'`
          âœ“ `'fileWith/defaultExt.js'`           --->              `'fileWith/defaultExt.js'`
          âœ“ `'fileWith/defaultExt.min'`          --->             `'fileWith/defaultExt.min'`
          âœ“ `'fileWith/defaultExt.longExt'`      --->         `'fileWith/defaultExt.longExt'`
        

It is ignoring `.min` & `.dev` as extensions, and considers exts with up to 8 chars.

    `upath.defaultExt(filename, 'js', ['min', '.dev'], 8)` --returns-->

          âœ“ `'fileWith/defaultExt'`               --->               `'fileWith/defaultExt.js'`
          âœ“ `'fileWith/defaultExt.min'`           --->           `'fileWith/defaultExt.min.js'`
          âœ“ `'fileWith/defaultExt.dev'`           --->           `'fileWith/defaultExt.dev.js'`
          âœ“ `'fileWith/defaultExt.longExt'`       --->          `'fileWith/defaultExt.longExt'`
          âœ“ `'fileWith/defaultExt.longRext'`      --->      `'fileWith/defaultExt.longRext.js'`

  
Copyright(c) 2014-2020 Angelos Pikoulas (agelos.pikoulas@gmail.com)

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
¨/LICENSEÅDCopyright(c) 2014-2020 Angelos Pikoulas (agelos.pikoulas@gmail.com)

Permission is hereby granted, free of charge, to any person
obtaining a copy of this software and associated documentation
files (the "Software"), to deal in the Software without
restriction, including without limitation the rights to use,
copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the
Software is furnished to do so, subject to the following
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.
